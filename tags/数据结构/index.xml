<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Wed, 04 May 2022 01:19:59 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>平衡树性能测试</title>
      <link>https://blog.asukakyle.top/post/%E5%B9%B3%E8%A1%A1%E6%A0%91%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 04 May 2022 01:19:59 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%B9%B3%E8%A1%A1%E6%A0%91%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid>
      <description>支持两个操作：插入，查询 rank。 ## 结果 本机，Intel CPU，Windows，gcc version 10.2.0 (winlibs) ```text 全随机 Treap 1.866 7479 Treap2::Treap2 1.884 7479 Treap3::Treap3 1.542 7479 SCT::SCT 0.986 7479 SegTree 1.214 7479 SegTree2 1.024 7479 Tree 1.638 7479 部分有序 Treap 0.747 15767 Treap2::Treap2 0.895 15767 Treap3::Treap3 0.661 15767 SCT::SCT 0.817 15767 SegTree 0.626 15767 SegTree2 0.574 15767 Tree 0.903 15767 20000棵树 Treap 0.793 11 Treap2::Treap2 0.656 11 Treap3::Treap3 0.636 11 SCT::SCT 0.664 11 SegTree 1.056 11 SegTree2 0.</description>
    </item>
    
    <item>
      <title>全局平衡二叉树小记</title>
      <link>https://blog.asukakyle.top/post/%E5%85%A8%E5%B1%80%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Tue, 05 Apr 2022 23:56:15 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%85%A8%E5%B1%80%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B0%8F%E8%AE%B0/</guid>
      <description>“全局平衡二叉树”实际上是静态 Top Tree(实际上，更接近静态 LCT)。 考虑一条重链，它在树上pushup，维护的信息的方式实际上就是 Compress。 而跳轻边，它实际上就是在 Rake。 对于动态DP的模板，它是树上带权独立集，虚儿子信息（rake信息）是可减的 `f[0] -= max(g[0], g[1]), f[1] -= g[0]`。 如果不可减，就得用平衡树（比如 set 等，复杂的还得手写）维护。 所以全局平衡二叉树实际上就在干 Top Tree 干的事情，只不过不支持 link, cut, evert 之类的动态树操作罢了。 考虑到 Top Tree 的结构，下面的建树过程就比较显而易见了，每个点要把虚儿子子树大小加上。 ```cpp Node *build(int l, int r) { if (l &gt; r) return nullptr; int m = l - 1, sum = 0, now = 0; for (int i = l; i &lt;= r; i++) sum += siz[s[i]] - siz[son[s[i]]]; while (now * 2 &lt; sum &amp;&amp; m &lt;= r) m++, now += siz[s[m]] - siz[son[s[m]]]; Node *o = t + s[m]; o-&gt;ls = build(l, m - 1), o-&gt;rs = build(m + 1, r); if (o-&gt;ls) o-&gt;ls-&gt;fa = o; if (o-&gt;rs) o-&gt;rs-&gt;fa = o; pushup(o); return o; } ```</description>
    </item>
    
    <item>
      <title>Ynoi 等 lxl 题做题记录</title>
      <link>https://blog.asukakyle.top/post/ynoi/</link>
      <pubDate>Fri, 01 Apr 2022 12:59:27 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/ynoi/</guid>
      <description>## 前言 题目是乱序的。因为太菜了不会卡常，所以很多题是九十几分。 **UPD. 2022.04.27** 发现很多以前写的懒得写题解，感觉又都不太会了，后面还是做一题写一题比较好。 发现刷 Ynoi 收益很小，大部分时间只是在卡常。 不过数据结构题写起来有意思，自己写起来乐在其中，可能刷 Ynoi 对于算法竞赛并没有什么用，更多只是自我满足罢了。 ## P5047	[Ynoi2019 模拟赛] Yuno loves sqrt technology II &gt; 给定序列 $a_n$, $m$ 次询问区间逆序对。 &gt; &gt; $1 \leq n, m \leq 10^5, 1 \leq a_i \leq 10^9$。 莫队二次离线。 求前缀比它小/大的数的个数，用 $O(\sqrt n)$ 修改，$O(1)$ 查询的搞一下就行。 ```cpp #include constexpr int T(512), N(1e5 + 5), S(N / T + 1); struct Qry { int l, r, id; bool operator&lt;(const Qry &amp;rhs) const { return l / T == rhs.</description>
    </item>
    
    <item>
      <title>[NOI2021] 密码箱</title>
      <link>https://blog.asukakyle.top/post/noi2021-%E5%AF%86%E7%A0%81%E7%AE%B1/</link>
      <pubDate>Fri, 30 Jul 2021 20:54:17 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/noi2021-%E5%AF%86%E7%A0%81%E7%AE%B1/</guid>
      <description>## 题面 ![](statement.png) ## 题解 设向量 $\begin{pmatrix}x \\ y\end{pmatrix}$ 表示分数 $\dfrac x y$。 那么整数加分数的运算 $a+\dfrac x y = \dfrac{x + ay}{y}$ 可以表示为 $$ \begin{pmatrix} 1 &amp; a\\ 0 &amp; 1 \end{pmatrix} \begin{pmatrix} x\\y \end{pmatrix} = \begin{pmatrix} x+ay\\ y \end{pmatrix} $$ 设 $a_k = \dfrac{x}{y}$，则 $a_{k-1}&#39;=a_{k-1}+\dfrac y x$，写成矩阵形式为 $$ \begin{pmatrix} a_{k-1} &amp; 1\\ 1 &amp; 0 \end{pmatrix} \begin{pmatrix} x\\y \end{pmatrix} = \begin{pmatrix} a_{k-1}x+y\\ x \end{pmatrix} $$ 记 $$ F = \begin{pmatrix} a_{0} &amp; 1\\ 1 &amp; 0 \end{pmatrix} \begin{pmatrix} a_{1} &amp; 1\\ 1 &amp; 0 \end{pmatrix} \dots \begin{pmatrix} a_{k} &amp; 1\\ 1 &amp; 0 \end{pmatrix} $$ 则 $$ f(a_0, a_1, \dots, a_n) = F_{0, 0} $$ 考虑维护矩阵 $F$。 操作`W`相当于右乘矩阵 $\begin{pmatrix}1 &amp; 0\\1 &amp; 1\end{pmatrix}$ $$ \begin{pmatrix} a_{k} &amp; 1\\ 1 &amp; 0 \end{pmatrix} \begin{pmatrix} 1 &amp; 0\\ 1 &amp; 1 \end{pmatrix} = \begin{pmatrix} a_{k} + 1 &amp; 1\\ 1 &amp; 0 \end{pmatrix} $$ 操作`E`先考虑第二种情况，可以发现是右乘矩阵 $\begin{pmatrix}1 &amp; 0\\-1 &amp; 1\end{pmatrix}\begin{pmatrix}1 &amp; 1\\1 &amp; 0\end{pmatrix}^2=\begin{pmatrix}2 &amp; 1\\-1 &amp; 0\end{pmatrix}$ $$ \begin{pmatrix}a_{k} &amp; 1\\1 &amp; 0\end{pmatrix} \begin{pmatrix}2 &amp; 1\\-1 &amp; 0\end{pmatrix} = \begin{pmatrix}2a_{k}-1 &amp; a_k\\2 &amp; 1\end{pmatrix} $$ 验证 $a_k=1$ 时是否也符合题意： 一方面 $$ \begin{pmatrix}a_{k-1} &amp; 1\\1 &amp; 0\end{pmatrix} \begin{pmatrix}2a_{k}-1 &amp; a_k\\2 &amp; 1\end{pmatrix}= \begin{pmatrix}a_{k-1} &amp; 1\\1 &amp; 0\end{pmatrix} \begin{pmatrix}1 &amp; 1\\2 &amp; 1\end{pmatrix}= \begin{pmatrix}a_{k-1}+2 &amp; a_{k-1}+1\\1 &amp; 1\end{pmatrix} $$ 另一方面 $$ \begin{pmatrix}a_{k-1}+1 &amp; 1\\1 &amp; 0\end{pmatrix} \begin{pmatrix}1 &amp; 1\\1 &amp; 0\end{pmatrix}=\begin{pmatrix}a_{k-1}+2 &amp; a_{k-1}+1\\1 &amp; 1\end{pmatrix} $$ 所以操作`E`就是右乘矩阵 $\begin{pmatrix}2 &amp; 1\\-1 &amp; 0\end{pmatrix}$ 平衡树维护即可。 ```cpp // Author: HolyK // Created: Fri Jul 30 19:13:22 2021 #include #define dbg(a.</description>
    </item>
    
    <item>
      <title>莫队小记</title>
      <link>https://blog.asukakyle.top/post/%E8%8E%AB%E9%98%9F/</link>
      <pubDate>Mon, 12 Jul 2021 15:21:22 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E8%8E%AB%E9%98%9F/</guid>
      <description>## 莫队二次离线 从 $[x, y]$ 移动到 $[l, r]$。 - $x \to l$ 查询 $a_i$ 在区间 $[i+1, y]$ 的贡献，拆成两个前缀 $i, y$，预处理 $a_{i-1}$ 对前缀 $i-1$ 的贡献，设贡献的前缀和为 $pre_1[i]$。 1. $xl$ 加入 $a_l\dots a_{x-1}$。 加前缀 $y$ 的贡献、减前缀 $i$ 的贡献。 离线 $\{y, l, x-1,+1\}, \Delta ans= pre_1[l] - pre_1[x]$。 - $y\to r$ 查询 $a_i$ 在区间 $[x, i-1]$ 的贡献，拆成两个前缀 $x-1, i-1$，预处理 $a_{i}$ 对前缀 $i-1$ 的贡献，设贡献的前缀和为 $pre_2[i]$。 1. $yr$ 删除 $a_{r+1}\dots a_y$ 加前缀 $x-1$ 的贡献、减前缀 $i-1$ 的贡献。 离线 $\{x-1, r+1, y, +1\}, \Delta ans = pre_2[r] - pre_2[y]$。 离线形式 $\{i, x, y, z\}$ 表示查询 $a_x\dots a_y$ 对前缀 $i$ 的贡献乘以系数 $z$。 计算方法和预处理方法一般是相同的，注意平衡复杂度，一般是 $O(\sqrt n)$ 修改，$O(1)$ 查询。 关键部分代码： ```cpp std::vector pre1(n + 1), pre2(n + 1); for (int i = 0; i &lt; n; i++) { update(a[i]); pre1[i + 1] = pre1[i] + ask(a[i]); pre2[i + 1] = pre2[i] + ask(a[i + 1]); } std::sort(q.</description>
    </item>
    
    <item>
      <title>[Codeforces938G]Shortest Path Queries</title>
      <link>https://blog.asukakyle.top/post/cf938g/</link>
      <pubDate>Thu, 15 Apr 2021 17:26:44 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/cf938g/</guid>
      <description>&gt; 给定一个带权无向图，实现三种操作：加边，删边，询问两点间的异或最短路。 &gt; &gt; $n, m, q \leq 2\times 10^5$。 类似最大 xor 和路径，用线性基可以求解异或最短路。 因为线性基删除很麻烦，所以直接离线用线段树分治。 图可能不连通，需要用并查集维护连通性，然后记录每个点到当前根的异或和 $d_x$。 加边时设 $val = d_x\oplus d_y \oplus w$，如果 $x, y$ 已经联通则将 $val$ 加入当前联通块的线性基，如果不在一个并查集，连接两个根，边权为 $val$。 ```cpp #include #define perr(a...) fprintf(stderr, a) #define dbg(a...) perr(&#34;\033[32;1m&#34;), perr(a), perr(&#34;\033[0m&#34;) template inline bool smin(T &amp;x, const U &amp;y) { return y &lt; x ? x = y, 1 : 0; } template inline bool smax(T &amp;x, const U &amp;y) { return x &lt; y ?</description>
    </item>
    
    <item>
      <title>Gym102994</title>
      <link>https://blog.asukakyle.top/post/gym102994/</link>
      <pubDate>Thu, 15 Apr 2021 09:03:20 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/gym102994/</guid>
      <description>## 总览 | 题号 | A | B | C | D | E | F | G | H | I | J | K | L | M | |:--------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|---|---| | 完成情况 | 1 | 1 | 0 | 1 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | ## A. Everyone Loves Playing Games &gt; A 有 $N$ 对数， B 有 $M$ 对数，A 从 $N$ 对数中分别选一个数得到异或和 $X$，然后 B 从 $N$ 对数得到一个异或和 $Y$，$A$ 希望 $X \oplus Y$ 最大，$B$ 希望 $X \oplus Y$ 最小，求最后的结果。 &gt; &gt; $N, M \leq 10000, 0 \leq x \leq 10^{18}$。 设每对数为 $(x_i, y_i)$，先都选上 $x_i$，然后变成选或不选 $x_i \oplus y_i$ 的问题。 A 和 B 分别建出线性基，然后从高位向低位考虑。 只需要考虑某一位 A 和 B 都有影响的情况，这位如果为 1 那么 A B 只会选一个，如果为 0 则要么都选，要么都不选，不管哪种情况两种状态都可以通过异或 $A_i \oplus B_i$ 来相互转换，所以这种情况将 $A_i \oplus B_i$ 插入 $A$ 的线性基来提供“反悔”的机会。 ```cpp #include #include #define perr(a.</description>
    </item>
    
    <item>
      <title>Gym102441</title>
      <link>https://blog.asukakyle.top/post/gym102441/</link>
      <pubDate>Thu, 08 Apr 2021 22:39:55 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/gym102441/</guid>
      <description>## 总览 | 题号 | A | B | C | D | E | F | G | H | I | J | K | |:--------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| | 完成情况 | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | ## A. Template for Search &gt; 给定由小写字母、字符`*` 和 `?` 组成的字符串 $s$，其中 `*` 可以被替换成任意串（包括空串），`?` 可以被替换成任意字符，求 $s$ 可以表示成的最短回文串。 &gt; &gt; $1 \leq |s| \leq 500$。 设 $dp[l][r]$ 表示 $l \dots r$ 能组成的最短回文串，有三种转移： - $s_l$ 匹配 $s_r$ - $s_l = *$ 匹配右边一段 - $s_r = *$ 匹配左边一段 ## B.</description>
    </item>
    
    <item>
      <title>[Codeforces955D]Scissors</title>
      <link>https://blog.asukakyle.top/post/codeforces955dscissors/</link>
      <pubDate>Fri, 26 Mar 2021 17:56:38 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces955dscissors/</guid>
      <description>&gt; 给定两个串 $s,t$ 整数 $k$ ,你可以在 $s$ 中取出任意的两个不相交的长度为 $k$ 串，将它们按顺序拼在一起形成一个新串。 &gt; &gt; 求一种取串的方案使得 $t$ 是新串的子串。 &gt; &gt; $|s|,|t| \leq 5 \times 10^5$。 kmp 算出正串和反串的能匹配 $t$ 的前/后缀最大长度。 设 $s$ 串的前缀 $[pre_1 \dots pre_i]$ 能匹配 $t$ 的前缀集合为 $P$，后缀 $[suf_{i+1},suf_n]$ 能匹配 $t$ 的后缀集合为 $Q$，只要判断是否存在 $x\in P,y\in Q,x, y\leq k,x+y=|s|$ 即可。 类似 AC 自动机那样建出 fail 树，那么一个点能匹配的前缀长度集合就是在 fail 树上到根的路径，在正串 fail 树上维护集合 $P$，每次添加一个数 $x$ 时，标记 $k-x$ 对应在反串 fail 树上的点，每次查询反串 fail 树上一个点的祖先是否被标记。 具体实现时，标记一个点可以用子树加一，查询的时候单点查询即可。 复杂度 $O(n \log n)$。 ```cpp #include #define dbg(.</description>
    </item>
    
    <item>
      <title>[Codeforces1413F]Roads and Ramen</title>
      <link>https://blog.asukakyle.top/post/codeforces1413froads-and-ramen/</link>
      <pubDate>Fri, 19 Mar 2021 10:09:39 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces1413froads-and-ramen/</guid>
      <description>&gt; 给定一棵 $n$ 个点的无根树，每条边都有标记0或1。现在有 $m$ 次操作，每次操作将第 $id$ 条边的标记异或1。在每次操作后输出当前树上最长的有偶数个1的路径长度。 &gt; &gt; $n,m \leq 5 \times 10^5$。 ## 动态DP 设 $dp[x][0/1]$ 表示 $x$ 向下有偶数/奇数个1的最长路径，$dp[x][2]$ 表示 $x$ 子树内偶数个1的直径。 容易写出转移（$val_y$ 表示 $y$ 的父边的权值）： $$ \begin{aligned} dp&#39;[x][0] &amp;= \max\{dp[x][0], dp[y][val_y] + 1\}\\ dp&#39;[x][1] &amp;= \max\{dp[x][1], dp[y][val_y \oplus 1] + 1\}\\ dp&#39;[x][2] &amp;= \max\{dp[x][0] + dp[y][val_y] + 1, dp[x][1] + dp[y][val_y \oplus 1] + 1, dp[x][2],dp[y][2]\} \end{aligned} $$ 改写成 $x$ 从重儿子 $y$ 转移的矩阵（这里以 $val_y = 0$ 为例）： $$ \begin{bmatrix} dp&#39;[x][0]\\ dp&#39;[x][1]\\ dp&#39;[x][2]\\ 0 \end{bmatrix} = \begin{bmatrix} 1 &amp; -\infty &amp; -\infty &amp; dp[x][0]\\ -\infty &amp; 1 &amp; -\infty &amp; dp[x][1]\\ dp[x][0] + 1 &amp; dp[x][1] + 1 &amp; 0 &amp; dp[x][2]\\ -\infty &amp; -\infty &amp; -\infty &amp; 0 \end{bmatrix} \begin{bmatrix} dp[y][0]\\ dp[y][1]\\ dp[y][2]\\ 0 \end{bmatrix} $$ 上面的 $dp[x]$ 是指排除掉 $x$ 重儿子的答案，$dp&#39;[x]$ 是指完整的 $x$ 的答案。 $dp[x]$ 考虑直接用 `std::multiset` 存一下每个节点虚儿子的 $dp[y][0], dp[y][1], dp[y][2]$，取每个的最大和次大值即可快速求出。 复杂度是 $O(4^3 m \log n + m \log^2n)$，能跑过 $5 \times 10^5$ 也是奇迹。 **细节**：在 `multiset` 中删除 $-\infty$ 时不能直接查找对应的值，应该直接删除 `multiset` 中最小的那个值（具体见函数 `void erase(std::multiset&amp;, int)`）。 ```cpp #include #ifdef LOCAL #define dbg(args.</description>
    </item>
    
    <item>
      <title>李超线段树和set维护凸包</title>
      <link>https://blog.asukakyle.top/post/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%92%8Cset%E7%BB%B4%E6%8A%A4%E5%87%B8%E5%8C%85/</link>
      <pubDate>Thu, 18 Mar 2021 21:30:30 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%92%8Cset%E7%BB%B4%E6%8A%A4%E5%87%B8%E5%8C%85/</guid>
      <description>## 问题引入 有一些点 $(a_i, b_i)$，需要多次询问 $\max\{ax_0+b\}$。 ## 李超线段树 利用李超线段树可以很好地维护上述信息。 李超线段树就是支持 $O(\log N)$ 插入直线和查询 $\max{L_i(x)}$ 的数据结构。 线段树的每个节点保存 $L(mid)$ 最大的那条直线。 插入一条直线时，比较 $L_{old}(mid)$ 和 $L_{new}(mid)$，较大者保留，较小者继续递归。 ```cpp constexpr int N(1e5 + 5); struct Line { LL k, b; LL f(int x) { return k * x + b; } } t[N &lt;&lt; 2]; #define ls o &lt;&lt; 1 #define rs o &lt;&lt; 1 | 1 void ins(int o, int l, int r, Line x) { int m = l + r &gt;&gt; 1; bool lv = x.</description>
    </item>
    
    <item>
      <title>[Codeforces1148H] Holy Diver</title>
      <link>https://blog.asukakyle.top/post/codeforces1148h-holy-diver/</link>
      <pubDate>Sat, 13 Mar 2021 00:43:08 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces1148h-holy-diver/</guid>
      <description>&gt; 给定一个最初为空的数组，然后进行 $n$ 次操作，每次操作给定 $x,l,r,k$，在数组末尾插入 $x$ ，然后查询满足 $mex(\{a_i, a_{i + 1}, \dots, a_j\}) = k$ 的数对 $(i,j)$ 的个数，**强制在线**。 &gt; &gt; $mex(S)$ 表示集合 $S$ 中最小的未出现的 **自然数**。 &gt; &gt; $n \leq 2 \times 10^5$。 为表示方便，下面记 $mex(i, j) = mex(\{a_i, a_{i + 1}, \dots, a_j\})$。 容易发现，如果向集合 $S$ 中添加数，$mex(S)$ 不会减小。 所以如果固定右端点 $j$，$mex(i, j)$ 是**非严格单调减**的；固定左端点 $i$，$mex(i, j)$ 是**非严格单调增**的。 维护一个 $n \times n$ 矩阵，$A[i][j] = mex(j, i)$，则矩阵 $A$ 的每一行从左到右都是非严格单调减的，每一列从上到下都是非严格单调增的。 第 $i$ 次操作增加一个数 $x$，考虑从第 $i - 1$ 行拓展到第 $i$ 行时矩阵 $A$ 的变化。 首先 $A[i][i]=[x=0]$。 下面只考虑 $j &lt; i$ 的情况。 如果 $A[i-1][j]=x$，则 $A[i][j]&gt;x$，否则 $A[i][j] = A[i - 1][j]$。 所以每次变化的只有等于 $x$ 的那些位置，根据单调性，这是一段区间，记为 $[p,q]$。 设 $j \in [p, q]$，要求 $mex(j, i)$，只需要知道最后一次出现的位置小于 $j$ 的最小的数。所以用线段树维护序列 $seq_{lastpos[x]} = x$ ，每次求区间最小值，找到对应位置 $index$，这个位置右边的所有 $A[i][j]$ 都等于这个最小值，然后令 $q = index$，反复迭代，直到待求区间为空。 分析一下这个操作的复杂度，每次相当于删除一个区间 $[p,q]$，添加若干个小区间。 开始只有一个区间，最后的区间数不超过 $n$，中间只会删除最多 $n$ 次区间。 所以添加区间的总次数不会超过 $2n$ ，复杂度为 $O(n \log n)$。 然后考虑回答询问。 ## 矩形交的面积 我们用四元组 $(top,bottom,left,right)$ 描述一个矩形 $\{(i,j):top \leq i \leq bottom,left \leq j \leq right\}$。 每次询问可以看作是询问矩形 $(l, r, l, r)$ 内 $A[i][j]=k$ 的个数。 那么由上面 $mex$ 的单调性可以发现，$A[i][j] = k$ 的点可以组成一个个连通块，每个连通块由若干个矩形构成**阶梯状**（矩形的 $left$ 相同，$right$ 递增）。 且前一个连通块的 $right$ 小于后一个连通块的 $left$。 问题转化为求这些矩形与询问矩形交的面积之和。 用 `std::vector` 存下每个 $k$ 的所有矩形，维护前缀面积和，二分出相交与非相交的临界点，对于完全包含的用前缀和搞定，对于相交却不包含的，由于是阶梯状，所以也可以 $O(1)$ 计算，细节有点多。 由上面的复杂度分析可知，所有矩形的数量不会超过 $2n$ 个，所以总复杂度 $O(n \log n)$。 ```cpp #include #ifdef LOCAL #define dbg(args.</description>
    </item>
    
  </channel>
</rss>
