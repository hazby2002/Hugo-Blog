<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生成函数/多项式 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</link>
    <description>Recent content in 生成函数/多项式 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://blog.asukakyle.top/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%A4%9A%E9%A1%B9%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【置顶】多项式板子修订日记</title>
      <link>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E6%97%A5%E8%AE%B0/</link>
      <pubDate>Wed, 11 Aug 2021 20:59:52 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E6%97%A5%E8%AE%B0/</guid>
      <description>Basic 主要功能列表  using Poly = std::vector&amp;lt;int&amp;gt;;：用 vector 表示多项式。 void dft/idft(int *a, n);：长度为 \(n\) 的 dft/idft，需要保证 \(n = 2^k\)。 void dft/idft(Poly &amp;amp;a);：参数为多项式的dft/idft。 void dftDoubling(int *x, int n);：将长度为 \(n\) 的 dft 扩大为长度 \(2n\) 的 dft。 Poly operator*(Poly a, Poly b)：多项式乘法。 Poly operator+(Poly a, Poly b)：多项式加法。 Poly operator-(Poly a, Poly b)：多项式减法。 Poly operator/(Poly a, Poly b)：多项式除法。 std::pair&amp;lt;Poly, Poly&amp;gt; operator%(Poly a, Poly b)：多项式取模。 Poly inverse(Poly a);：多项式乘法逆。 Poly sqrt(Poly a);：多项式开根。 Poly deriv(Poly a);：多项式求导。 Poly integ(Poly a);：多项式积分。 Poly ln(Poly a);：多项式对数函数。 Poly expNewton(Poly a);：多项式指数函数（牛顿迭代，需要保证长度为 2 的幂）。 Poly exp2(Poly a);：多项式指数函数（半在线卷积）。 Poly exp(Poly a);：多项式指数函数（优化半在线卷积）。 Poly power(Poly a, int k);：多项式幂函数。 Poly power(Poly a, int k1, int k2);：多项式幂函数（模数对 \(P\) 和 \(\varphi(P)\) 取模）。 Poly divAt(Poly p, Poly q, LL n);：计算 \([x^n]\dfrac{P(x)}{Q(x)}\)。 Poly invRange(Poly q, LL l, LL r);：计算 \([x^k]\dfrac{1}{Q(x)}, k = l, l + 1, \dots, r\)。 Poly divAt2(Poly p, Poly q, LL n);：计算 \([x^n]\dfrac{P(x)}{Q(x)}\)，使用 invRange。  2021/8/11  int divAt(Poly p, Poly q, LL n);：增加 \([x^n]\dfrac{P(x)}{Q(x)}\)，并稍微卡了卡常。 expNewton, exp2, exp：牛顿迭代exp改名，分别增加 \(O\left(n \log^2n\right)\) 和 \(O\left(\dfrac{n \log^2n}{\log\log n}\right)\) 半在线卷积求多项式 Exp。（由于懒得写递归的，顺便发明了多叉cdq分治迭代版） invRec, inverse：原求逆需要长度为 2 的幂，保留为 invRec，增加新的 inverse，不需要保证长度。现在所有多项式操作（除了 dft, idft, expNewton）均不要求长度为 2 的幂。  2021/9/19  dftDoubling：增加扩大 dft 长度函数，用于减小常数。 invRange：求多项式逆的若干项，\(O(n \log^2 n)\)。 divAt2：使用 invRange 实现的 divAt。 增加了少量注释。  namespace Polynomial { using Poly = std::vector&amp;lt;int&amp;gt;; constexpr int P(998244353), G(3); inline void inc(int &amp;amp;x, int y) { (x += y) &amp;gt;= P ?</description>
    </item>
    
  </channel>
</rss>
