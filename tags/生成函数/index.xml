<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生成函数 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</link>
    <description>Recent content in 生成函数 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Thu, 12 May 2022 00:35:08 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【置顶】多项式板子修订记录</title>
      <link>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 11 Aug 2021 20:59:52 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E8%AE%B0%E5%BD%95/</guid>
      <description>日志 2021/12/3 进行了结构性调整，且增加了一些不常用内容，修改了一些细节上的写法，因此不在原文修改，旧版附在最后。
2021/12/19 弃用原模板，保留一部分在不常用里面，其他删除。
TODO  多项式GCD 多项式复合 多项式复合逆  Poly constexpr int P(998244353), G(3), L(1 &amp;lt;&amp;lt; 18); inline void inc(int &amp;amp;x, int y) {  x += y;  if (x &amp;gt;= P) x -= P; } inline void dec(int &amp;amp;x, int y) {  x -= y;  if (x &amp;lt; 0) x += P; } inline int mod(LL x) { return x % P; } int fpow(int x, int k = P - 2) {  int r = 1;  for (; k; k &amp;gt;&amp;gt;= 1, x = 1LL * x * x % P) {  if (k &amp;amp; 1) r = 1LL * r * x % P;  }  return r; } int w[L], fac[L], ifac[L], inv[L], _ = [] {  w[L / 2] = 1;  for (int i = L / 2 + 1, x = fpow(G, (P - 1) / L); i &amp;lt; L; i++) w[i] = 1LL * w[i - 1] * x % P;  for (int i = L / 2 - 1; i &amp;gt;= 0; i--) w[i] = w[i &amp;lt;&amp;lt; 1];    fac[0] = 1;  for (int i = 1; i &amp;lt; L; i++) fac[i] = 1LL * fac[i - 1] * i % P;  ifac[L - 1] = fpow(fac[L - 1]);  for (int i = L - 1; i; i--) {  ifac[i - 1] = 1LL * ifac[i] * i % P;  inv[i] = 1LL * ifac[i] * fac[i - 1] % P;  }  return 0; }(); void dft(int *a, int n) {  assert((n &amp;amp; n - 1) == 0);  for (int k = n &amp;gt;&amp;gt; 1; k; k &amp;gt;&amp;gt;= 1) {  for (int i = 0; i &amp;lt; n; i += k &amp;lt;&amp;lt; 1) {  for (int j = 0; j &amp;lt; k; j++) {  int &amp;amp;x = a[i + j], y = a[i + j + k];  a[i + j + k] = 1LL * (x - y + P) * w[k + j] % P;  inc(x, y);  }  }  } } void idft(int *a, int n) {  assert((n &amp;amp; n - 1) == 0);  for (int k = 1; k &amp;lt; n; k &amp;lt;&amp;lt;= 1) {  for (int i = 0; i &amp;lt; n; i += k &amp;lt;&amp;lt; 1) {  for (int j = 0; j &amp;lt; k; j++) {  int x = a[i + j], y = 1LL * a[i + j + k] * w[k + j] % P;  a[i + j + k] = x - y &amp;lt; 0 ?</description>
    </item>
    
    <item>
      <title>[Codeforces1677F]Tokitsukaze and Gems</title>
      <link>https://blog.asukakyle.top/post/codeforces1677ftokitsukaze-and-gems/</link>
      <pubDate>Thu, 12 May 2022 00:35:08 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces1677ftokitsukaze-and-gems/</guid>
      <description>传送门
 给定 \(n, k, p, a_1, a_2, \dots, a_n\)，求 \[ \sum_{1 \leq l \leq r \leq n}\sum_{l \leq i \leq r, 0 \leq t_i \leq a_i} \left(\left(\sum_{i=1}^np^{t_i}t_i^k\right)\left(\sum_{i=1}^n[t_i&amp;gt;0]\right)\right) \]
答案对 \(998244353\) 取模。
\(1 \leq n, k\leq 10^5, 2 \leq p \leq 998244351, 1 \leq a_i \leq 998244351\)。
 考虑对固定的 \([l, r]\) 计算答案，它是两个数乘积之和的形式。可以通过维护 \((\sum xy, \sum x, \sum y, \sum 1)\) 四元组来计算答案。
这个玩意是线性变换，写成矩阵形式可以发现，答案最后就是要你求所有区间的矩阵乘积之和。
这个可以直接维护每个位置作为右端点的答案，只要维护当前后缀的四元组即可。
求单个的四元组，可以发现就是要求 \(\sum_{i=0}^{a_j} p^ii^k\)。
对于这个问题，板子 OJ 有一个 单次询问的版本，本题解没有参考上面的做法。</description>
    </item>
    
  </channel>
</rss>
