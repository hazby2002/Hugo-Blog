<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多项式 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</link>
    <description>Recent content in 多项式 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Fri, 20 May 2022 12:26:31 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【置顶】多项式板子修订记录</title>
      <link>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 11 Aug 2021 20:59:52 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E8%AE%B0%E5%BD%95/</guid>
      <description>日志 2021/12/3 进行了结构性调整，且增加了一些不常用内容，修改了一些细节上的写法，因此不在原文修改，旧版附在最后。
2021/12/19 弃用原模板，保留一部分在不常用里面，其他删除。
TODO 多项式GCD 多项式复合 多项式复合逆 Poly constexpr int P(998244353), G(3), L(1 &amp;lt;&amp;lt; 18); inline void inc(int &amp;amp;x, int y) { x += y; if (x &amp;gt;= P) x -= P; } inline void dec(int &amp;amp;x, int y) { x -= y; if (x &amp;lt; 0) x += P; } inline int mod(LL x) { return x % P; } int fpow(int x, int k = P - 2) { int r = 1; for (; k; k &amp;gt;&amp;gt;= 1, x = 1LL * x * x % P) { if (k &amp;amp; 1) r = 1LL * r * x % P; } return r; } int w[L], fac[L], ifac[L], inv[L], _ = [] { w[L / 2] = 1; for (int i = L / 2 + 1, x = fpow(G, (P - 1) / L); i &amp;lt; L; i++) w[i] = 1LL * w[i - 1] * x % P; for (int i = L / 2 - 1; i &amp;gt;= 0; i--) w[i] = w[i &amp;lt;&amp;lt; 1]; fac[0] = 1; for (int i = 1; i &amp;lt; L; i++) fac[i] = 1LL * fac[i - 1] * i % P; ifac[L - 1] = fpow(fac[L - 1]); for (int i = L - 1; i; i--) { ifac[i - 1] = 1LL * ifac[i] * i % P; inv[i] = 1LL * ifac[i] * fac[i - 1] % P; } return 0; }(); void dft(int *a, int n) { assert((n &amp;amp; n - 1) == 0); for (int k = n &amp;gt;&amp;gt; 1; k; k &amp;gt;&amp;gt;= 1) { for (int i = 0; i &amp;lt; n; i += k &amp;lt;&amp;lt; 1) { for (int j = 0; j &amp;lt; k; j++) { int &amp;amp;x = a[i + j], y = a[i + j + k]; a[i + j + k] = 1LL * (x - y + P) * w[k + j] % P; inc(x, y); } } } } void idft(int *a, int n) { assert((n &amp;amp; n - 1) == 0); for (int k = 1; k &amp;lt; n; k &amp;lt;&amp;lt;= 1) { for (int i = 0; i &amp;lt; n; i += k &amp;lt;&amp;lt; 1) { for (int j = 0; j &amp;lt; k; j++) { int x = a[i + j], y = 1LL * a[i + j + k] * w[k + j] % P; a[i + j + k] = x - y &amp;lt; 0 ?</description>
    </item>
    
    <item>
      <title>（半）在线卷积小记</title>
      <link>https://blog.asukakyle.top/post/%E5%8D%8A%E5%9C%A8%E7%BA%BF%E5%8D%B7%E7%A7%AF%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 20 May 2022 12:26:31 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%8D%8A%E5%9C%A8%E7%BA%BF%E5%8D%B7%E7%A7%AF%E5%B0%8F%E8%AE%B0/</guid>
      <description>前言 本文写于 2021-12-02 14:47，是上学期我研究的对于算法竞赛来说用处很小的东西。
今天想起，需要重新整理好二叉（半）在线卷积的模板，这个东西在考场上还是很有用的。
相关题目：
ABC230H 半在线卷积 设 \(H = FG\)。其中 \(G\) 的系数事先给出，\(F\) 的系数从低次到高次在线地给出，每次给出 \(F\) 的 \(x^i\) 系数后，你需要在线地计算 \(H\) 的 \(x^i\) 系数。
考虑分治，将区间 \([l, r)\) 分为 \(T\) 段，每段长度为 \(B = 2^k\)。 \[ [l=m_0, m_1), [m_1, m_2), \dots, [m_{T-1}, m_T=r) \] 要分别计算对于 \(0 \leq i &amp;lt; j &amp;lt; T\), \(F[m_i, m_{i+1})\) 对于 \(H[m_j, m_{j+1})\) 的贡献，其中 \(A[l,r)\) 表示多项式 \(A(x)\) 在 \(x^l, x^{l+1}, \dots, x^{r-1}\) 处的系数。
显然 \(F[m_i, m_{i+1})\) 要乘上 \(G[m_j-m_{i+1}+1, m_{j+1} - m_i)\)。</description>
    </item>
    
    <item>
      <title>常系数齐次线性递推小记</title>
      <link>https://blog.asukakyle.top/post/%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E9%80%92%E6%8E%A8%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 21 Feb 2022 23:11:13 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E9%80%92%E6%8E%A8%E5%B0%8F%E8%AE%B0/</guid>
      <description>常系数齐次线性递推 对于 \(n \geq k\)，\(\sum_{i=0}^kq_ia_{n-i}=0\)，其中 \(q_0 \neq 0\)。
数列 \(a_n\) 的生成函数为 \(A(x)\)。
上式左边看作卷积，右边看作生成函数 \(P(x)\) 的 \(n \geq k\) 时的系数。
\[ Q(x)A(x) = P(x) \] \[ A(x) = \frac{P(x)}{Q(x)} \]
\(P(x)\) 为 \(k-1\) 次多项式，\(Q(x)\) 为 \(k\) 次多项式。
然后就是解决 \([x^n]\dfrac{P(x)}{Q(x)}\) 的问题。
使用 EI 提到的方法，考虑 \[ \frac{P(x)}{Q(x)} = \frac{P(x)Q(-x)}{Q(x)Q(-x)} \] 由于 \(Q(x)Q(-x) = Q(-x)Q(x)\)，所以它只有偶次项有值，设 \(U(x^2) = Q(x)Q(-x)\)， \[ \frac{P(x)}{Q(x)} = \frac{E(x^2)}{U(x^2)}+x\frac{O(x^2)}{U(x^2)} \] 只需要递归到一侧即可。
朴素实现只需要写多项式乘法，优化的实现已经在多项式板子里。
int divAt(Poly p, Poly q, LL n) { for (; n; n &amp;gt;&amp;gt;= 1) { Poly r(q); for (int i = 1; i &amp;lt; r.</description>
    </item>
    
  </channel>
</rss>
