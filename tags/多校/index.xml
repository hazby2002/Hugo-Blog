<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多校 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/%E5%A4%9A%E6%A0%A1/</link>
    <description>Recent content in 多校 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Sat, 31 Jul 2021 11:28:56 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/tags/%E5%A4%9A%E6%A0%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2021牛客多校4</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder4/</link>
      <pubDate>Sat, 31 Jul 2021 11:28:56 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder4/</guid>
      <description>  题号 标题 团队的状态    A Course 通过  B Sample Game 通过  C LCS 通过  D Rebuild Tree 通过  E Tree Xor 通过  F Just a joke 通过  G Product 通过  H Convolution 通过  I Inverse Pair 通过  J Average 通过    Course Sample Game LCS Rebuild Tree Tree Xor Just a joke Product Convolution Inverse Pair Average </description>
    </item>
    
    <item>
      <title>2021牛客多校3</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder3/</link>
      <pubDate>Sat, 31 Jul 2021 11:28:53 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder3/</guid>
      <description>题号 标题 团队的状态    A Guess and lies 通过  B Black and white 通过  C Minimum grid 通过  D Count 通过  E Math 通过  F 24dian 通过  G Yu Ling(Ling YueZheng) and Colorful Tree 通过  H Ling Qiu, Luna and Triple Backpack 未通过  I Kuriyama Mirai and Exclusive Or 通过  J Counting Triangles 通过    Guess and lies Black and white Minimum grid Count Math 24dian Yu Ling(Ling YueZheng) and Colorful Tree  一棵 \(n\) 个点的树，1 是根。\(q\) 次操作：</description>
    </item>
    
    <item>
      <title>2021杭电多校4</title>
      <link>https://blog.asukakyle.top/post/2021hdu4/</link>
      <pubDate>Thu, 29 Jul 2021 18:01:33 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu4/</guid>
      <description>总览   题号 题目 完成情况    6985 Calculus 通过  6986 Kanade Loves Maze Designing 通过  6987 Cycle Binary   6988 Display Substring 通过  6989 Didn’t I Say to Make My Abilities Average in the Next Life?! 通过  6990 Directed Minimum Spanning Tree   6991 Increasing Subsequence 通过  6992 Lawn of the Dead 通过  6993 License Plate Recognition 通过  6994 Pony Running   6995 Travel on Tree 通过    Calculus 签到题，常数不是 0 的都不收敛。</description>
    </item>
    
    <item>
      <title>2021杭电多校3</title>
      <link>https://blog.asukakyle.top/post/2021hdu3/</link>
      <pubDate>Tue, 27 Jul 2021 20:39:53 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu3/</guid>
      <description>题号 题目 完成情况    6973 Bookshop 通过  6974 Destinations 通过  6975 Forgiving Matching 通过  6976 Game on Plane 通过  6977 Kart Race 通过  6978 New Equipments II   6979 Photoshop Layers 通过  6980 Restore Atlantis II   6981 Rise in Price 通过  6982 Road Discount 通过  6983 Segment Tree with Pruning 通过  6984 Tree Planting     Bookshop  给定一棵树，每个点有个权值 \(w_i\)，\(m\) 次询问，给出 \(x, y, z\)，表示从 \(x\) 走到 \(y\)，每经过一个点 \(i\)，如果 \(z \geq w_i\) 则 \(z -= w_i\)，最终 \(z\) 是多少。</description>
    </item>
    
    <item>
      <title>2021杭电多校2</title>
      <link>https://blog.asukakyle.top/post/2021hdu2/</link>
      <pubDate>Thu, 22 Jul 2021 18:50:15 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu2/</guid>
      <description>总览   题号 题目 完成情况    6961 I love cube 通过  6962 I love tree 通过  6963 I love playing games   6964 I love counting 通过  6965 I love string 通过  6966 I love sequences   6967 I love data structure 通过  6968 I love exam 通过  6969 I love triples 通过  6970 I love permutation   6971 I love max and multiply 通过    I love cube 队友切了</description>
    </item>
    
    <item>
      <title>2021牛客多校2</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder2/</link>
      <pubDate>Wed, 21 Jul 2021 13:31:31 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder2/</guid>
      <description>总览   题号 标题 团队的状态    A Arithmetic Progression 通过  B Cannon 通过  C Draw Grids 通过  D Er Ba Game 通过  E Gas Station 通过  F Girlfriend 通过  G League of Legends 通过  H Olefin 未通过  I Penguins 通过  J Product of GCDs 通过  K Stack 通过  L WeChat Walk 通过    Arithmetic Progression  给定每个元素互不相同的序列 \(a_n\)，求排序后能构成等差数列的区间个数。</description>
    </item>
    
    <item>
      <title>2021牛客多校1</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder1/</link>
      <pubDate>Tue, 20 Jul 2021 18:31:28 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder1/</guid>
      <description>  题号 标题 团队的状态    A Alice and Bob 通过  B Ball Dropping 通过  C Cut the Tree 通过  D Determine the Photo Position 通过  E Escape along Water Pipe 通过  F Find 3-friendly Integers 通过  G Game of Swapping Numbers 通过  H Hash Function 通过  I Increasing Subsequence 通过  J Journey among Railway Stations 通过  K Knowledge Test about Match 通过    Alice and Bob Ball Dropping Cut the Tree Determine the Photo Position Escape along Water Pipe Find 3-friendly Integers Game of Swapping Numbers Hash Function Increasing Subsequence Journey among Railway Stations Knowledge Test about Match </description>
    </item>
    
    <item>
      <title>2021杭电多校1</title>
      <link>https://blog.asukakyle.top/post/2021hdu1/</link>
      <pubDate>Tue, 20 Jul 2021 18:20:13 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu1/</guid>
      <description>Mod, Or and Everything 队友切了。
Rocket land Puzzle loop 设每个边有没有为 0/1，列方程组解异或方程，求自由元个数。
// Author: HolyK // Created: Tue Jul 20 17:38:11 2021 #include &amp;lt;bits/stdc++.h&amp;gt; #define dbg(a...)fprintf(stderr,a) template &amp;lt;class T, class U&amp;gt; inline bool smin(T &amp;amp;x, const U &amp;amp;y) {  return y &amp;lt; x ? x = y, 1 : 0; } template &amp;lt;class T, class U&amp;gt; inline bool smax(T &amp;amp;x, const U &amp;amp;y) {  return x &amp;lt; y ? x = y, 1 : 0; }  using LL = long long; using PII = std::pair&amp;lt;int, int&amp;gt;; constexpr int P(998244353); inline void inc(int &amp;amp;x, int y) {  x += y;  if (x &amp;gt;= P) x -= P; } int fpow(int x, int k = P - 2) {  int r = 1;  for (; k; k &amp;gt;&amp;gt;= 1, x = 1LL * x * x % P) {  if (k &amp;amp; 1) r = 1LL * r * x % P;  }  return r; } constexpr int N(17 * 16 * 2 + 5); using BTS = std::bitset&amp;lt;N&amp;gt;; BTS p[N], tmp; bool ins(BTS &amp;amp;x) {  for (int i = N - 1; i &amp;gt;= 0; i--) {  if (!</description>
    </item>
    
  </channel>
</rss>
