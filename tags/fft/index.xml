<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FFT on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/fft/</link>
    <description>Recent content in FFT on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Thu, 18 Mar 2021 15:28:59 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/tags/fft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fast Fourier Transform</title>
      <link>https://blog.asukakyle.top/post/fft/</link>
      <pubDate>Thu, 18 Mar 2021 15:28:59 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/fft/</guid>
      <description>## Introduction &gt; `快速傅里叶变换(Fast Fourier Transform，FFT)`是一种可在 $O(n \log n)$ 时间内完成的`离散傅里叶变换 (Discrete Fourier Transform，DFT)` 的算法，用来实现将信号从原始域（通常是时间或空间）到频域的互相转化。 FFT 在算法竞赛中主要用来加速多项式乘法（循环卷积）。 ### 多项式 形如 $$ A(x) = a_0 + a_1x + a_2x^2 + \dots + a_{n-1}x^{n - 1} $$ 的式子称为 $x$ 的 $n - 1$ 次多项式，其中 $a_0, a_1, \dots, a_{n - 1}$ 称为多项式系数，$n-1$ 称为多项式的次数，记为 $\deg A(x)$ 或 $\deg A$。 ### 点值 $n - 1$ 次多项式 $A(x)$ 在 $x = m$ 处的**点值** $$ A(m) = \sum_{k=0}^{n-1} a_km^k $$ ### 多项式乘法 记 $A(x)\times B(x)$ 表示多项式 $A(x), B(x)$ 做多项式乘法，可以简写为 $A(x)\cdot B(x)$ 或 $A(x)B(x)$。 多项式乘法 $$ \begin{aligned} C(x) = &amp;A(x) \times B(x)\\ = &amp;\left(a_0 + a_1x + \dots + a_{\deg A}x^{\deg A}\right)\cdot\left(b_0 + b_1x + \dots + b_{\deg B}x^{\deg B}\right)\\ = &amp;\sum_{r = 0}^{\deg A + \deg B} \sum_{k = 0}^r a_kb_{r - k} x^r \end{aligned} $$ 用系数关系可以表示为 $$ c_r = \sum_{k = 0}^ra_kb_{r - k} $$ 其中 $\deg C = \deg A + \deg B$。 易证它们的点值满足如下关系 $$ C(m) = A(m)B(m) $$ ### 循环卷积 记 $\operatorname{conv}(A, B, n)$ 表示多项式 $A(x), B(x)$ 做长度为 $n$ 的循环卷积。 循环卷积 $$ C(x) = \operatorname{conv}(A, B, n) $$ 系数关系表示为 $$ c_k = \sum_{p, q}[(p + q) \bmod n = k]a_pb_q $$ 其中 $\deg C = n - 1$。 容易发现，当 $n &gt; \deg A + \deg B$ 时，该运算等价于多项式乘法。 ### DFT &gt; `离散傅里叶变换(Discrete Fourier Transform, DFT)` 将多项式 $A(x)=\sum_{k=0}^{n-1}a_kx^k$ 转换为一些特殊的点值。 记 $n$ 次单位复根 $$ \omega_n = e^{\frac{2i\pi}n}=\cos\dfrac{2\pi}{n}+i\sin\dfrac{2\pi}{n} $$ $DFT(A)$ 就是要计算点值 $A(\omega_n^k), k = 0， 1， 2， \dots, n-1$。 单位根自带的循环特性使得循环卷积 $C(x) = \operatorname{conv}(A, B, n)$ 的点值也满足： $$ C(\omega_n^k) = A(\omega_n^k)B(\omega_n^k) $$ ### IDFT IDFT 是 DFT 的逆变换。 首先，用等比数列求和易证： $$ \begin{aligned} \frac1n\sum_{k = 0}^{n - 1}\omega_n^{vk} &amp;= [v \bmod n = 0] \end{aligned} $$ 考虑循环卷积 $C(x) = \operatorname{conv}(A, B, n)$ 的系数表示 $$ \begin{aligned} c_r = &amp;\sum_{p, q}[(p + q) \bmod n = r]a_pb_q\\ = &amp;\sum_{p, q}[(p + q - r) \bmod n = 0]a_pb_q\\ = &amp;\sum_{p, q}\frac1n\sum_{k = 0}^{n - 1}\omega_n^{pk+qk-rk}a_pb_q\\ = &amp;\sum_{p, q}\frac1n\sum_{k = 0}^{n - 1}\omega_n^{-rk}\cdot\omega_n^{pk}a_p\cdot\omega_n^{qk}b_q\\ = &amp;\frac1n\sum_{k = 0}^{n - 1}\omega_n^{-rk}\left(\sum_{p}\omega_n^{pk}a_p\sum_q\omega_n^{qk}b_q\right)\\ = &amp;\frac1n\sum_{k = 0}^{n - 1}\left(\omega_n^{-r}\right)^kA(\omega_n^k)B(\omega_n^k)\\ = &amp;\frac1n\sum_{k = 0}^{n - 1}\left(\omega_n^{n-r}\right)^kC(\omega_n^k) \end{aligned} $$ 设多项式 $$ C&#39;(x) = \sum_{k=0}^{n-1}C(\omega_n^k)x^k $$ 只要计算 $DFT(C&#39;)$ 即可得到 $C(x)$ 的系数，于是我们用 DFT 完成了逆变换 IDFT。 用两次 DFT 和一次 IDFT就可以计算 $\operatorname{conv}(A, B, n)$。 暴力的复杂度是 $O(n^2)$，此处不赘述。 ### FFT 现在尝试将 DFT 问题分解以优化时间复杂度。 **本部分认为 $n = \deg A + 1$ 为 $2$ 的整数次幂。对于更一般的情况，暂不考虑。** #### DIF **将序列 $a_i$ 分成左右两半**。 $$ \begin{aligned} A(\omega_n^{r}) &amp;= \sum_{k = 0}^{n-1}a_k\omega_n^{rk}\\ &amp;= \sum_{k = 0}^{n / 2 - 1} \left(a_k\cdot\omega_n^{rk} + a_{k+n/2}\cdot\omega_n^{rk+rn/2}\right)\\ &amp;= \sum_{k = 0}^{n / 2 - 1} \left[a_k\cdot\omega_n^{rk} + (-1)^r\cdot a_{k+n/2}\cdot\omega_n^{rk}\right]\\ &amp;= \sum_{k = 0}^{n / 2 - 1} \left[a_k+(-1)^ra_{k+n/2}\right]\omega_{n}^{rk} \end{aligned} $$ **进一步，将 $A(\omega_{n}^r)$ 按奇偶分类**： $$ \begin{aligned} A\left(\omega_n^{2r}\right) &amp;= \sum_{k=0}^{n/2-1}\left(a_k+a_{k+n/2}\right)\omega_{n/2}^{rk}\\ A\left(\omega_n^{2r+1}\right) &amp;= \sum_{k=0}^{n/2-1}\left(\omega_{n}^ka_k-\omega_{n}^ka_{k+n/2}\right)\omega_{n/2}^{rk} \end{aligned} $$ 设 $$ \begin{aligned} &amp;p_k=a_k+a_{k+n/2}, &amp;P(x) = \sum_{k = 0}^{n/2-1}p_kx^k\\ &amp;q_k=\omega_{n}^k(a_k-a_{k+n/2}), &amp;Q(x) = \sum_{k=0}^{n/2-1}q_kx^k \end{aligned} $$ 我们只需要求出 $P(\omega_{n/2}^r)$ 和 $Q(\omega_{n/2}^r)$ ，即求解规模为原来一半的两个子问题 $DFT(P), DFT(Q)$，就能在 $O(n)$ 时间内计算出 $DFT(A)$。 #### DIT **在算法竞赛中这种方法更常见。** 注意到在 `DIF` 中我们最后将 $A(\omega_n^r)$ 奇偶分类求解，那不妨思考**将序列 $a_k$ 按奇偶分类**。 设 $$ \begin{aligned} A_0(x) = a_0 + a_2x + \dots + a_{n - 2}x^{n / 2}\\ A_1(x) = a_1 + a_3x+ \dots + a_{n - 1}x^{n / 2} \end{aligned} $$ 则 $$ A(x) = A_0(x^2) + xA_1(x^2) $$ 所以 $$ \begin{aligned} A(\omega_n^k) &amp;= A_0(\omega_n^{2k}) + \omega_n^kA_1(\omega_n^{2k})\\ &amp;= A_0(\omega_{n/2}^k) + \omega_n^kA_1(\omega_{n/2}^k) \end{aligned} $$ **将 $A(\omega_n^k)$ 再分为左右两半**，这里运用了等式 $\omega_{n/2}^k = \omega_{n/2}^{k + n/2}$ 和 $\omega_n^k+\omega_n^{k+n/2} = 0$ : $$ \begin{aligned} A(\omega_n^k) &amp;= A_0(\omega_{n/2}^k) + \omega_n^kA_1(\omega_{n/2}^k)\\ A\left(\omega_n^{k+n/2}\right) &amp;= A_0(\omega_{n/2}^k) - \omega_n^kA_1(\omega_{n/2}^k) \end{aligned} $$ 我们只需要求出 $A_0(\omega_{n/2}^k)$ 和 $A_1(\omega_{n/2}^k)$ ，即求解规模为原来一半的两个子问题 $DFT(A_0), DFT(A_1)$，就能在 $O(n)$ 时间内计算出 $DFT(A)$。 #### Complexity 设次数为 $n - 1$ 的多项式做 DFT 的时间复杂度为 $T(n)$，则 $$ T(n) = 2T(\frac{n}{2}) + O(n) $$ 根据主定理 $$ T(n) = O(n \log n) $$ ## Implementation ### Recursive 上述两种计算方式均可以使用递归实现，这里直接给出代码，不再赘述。 #### DIF ```cpp const double PI = acos(-1.</description>
    </item>
    
  </channel>
</rss>
