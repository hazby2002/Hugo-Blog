<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字符串 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
    <description>Recent content in 字符串 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Fri, 05 Aug 2022 23:16:50 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字符串记录</title>
      <link>https://blog.asukakyle.top/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 05 Aug 2022 23:16:50 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AE%B0%E5%BD%95/</guid>
      <description> P5576 [CmdOI2019]口头禅 给定一堆字符串，多次询问区间字符串最长公共子串。 广义SAM，用set维护子树内有的连续区间，自底向上启发式合并，增加区间时在线段树上查找可以回答的询问，并且将该询问删除。由于自底向上，保证len越来越小，所以回答完就可以删除。 P4482 [BJWC2018]Border 的四种求法 多次询问字符串区间border。 parent树上链分治。先考虑 \(node_r\) 暴力向上跳，找 pos 集合区间最大值的方法。HLD 之后把跳的过程拆到重链上。利用轻子树大小和为 \(O(n\log n)\)，每条重链处理，要求 \(pos - len &amp;lt; L\)，线段树以 \(pos\) 为下标，维护 \(\min\{pos-len\}\)，然后线段树上二分。 CF1098F Ж-function 多次询问 \(f(l, r)\) 表示子串 \(s[l, r]\) 每个后缀与该子串的 lcp 的和。 思路同上，用 HLD 优化暴力跳的过程，拆到重链上变成一个三维偏序，然后用 CDQ 分治做。 2022牛客多校6 L Striking String Problem 给定串 \(S, T\)，令 \(U = S[l_1, r_1] + S[l_2, r_2] + \dots + S[l_k, r_k]\)，\(q\) 次询问 \(T\) 在 \(U[x_i, y_i]\) 中的出现次数。数据结构优化KMP。 询问可以拆成两个前缀的答案之差，考虑对一个前缀的查询，设它在 \(S[l_i, r_i]\) 里，预处理前 \(i-1\) 的答案，设 \(\operatorname{query}(i, p)\) 表示右端点在 \([l_i, l_i+p)\) 的答案，完全落在 \(S[l, r]\) 内的答案可以预处理前缀和。 跨过 \(l_i\) 的答案，设超出长度为 \(D\)，需要满足 \(D+p \geq |T|, D+\operatorname{lcp}(S[l:], T[D+1:]) \geq |T|\)，对于同一个 \(D\)，\(S[l:]\) 要满足的条件是后缀树上的一个子树。对 \(T\) 的 kmp 失配树建可持久化线段树，区间修改单点查询。满足条件的 \(D\) 是失配树上的一个祖孙链，需要知道 \(S[l_1, r_1]+\dots+S[l_{i-1}, r_{i-1}]\) 和 \(T\) 的匹配长度，这个可以预处理，分匹配完全在 \(S[l, r]\) 和跨左端点讨论一下，后者还是在失配树上用线段树搞一下。 </description>
    </item>
    
    <item>
      <title>回文树小记</title>
      <link>https://blog.asukakyle.top/post/pam/</link>
      <pubDate>Wed, 14 Jul 2021 17:02:30 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/pam/</guid>
      <description>基本元素 节点：原串的一个本质不同的回文子串。
长度 len[o]：回文子串长度。
转移边 ch[o][x]：两边同时加字符 \(x\)。
失配边 fa[o]：最长回文后缀。到根的路径是所有回文后缀。
有两个根，奇根1 和 偶根0，fa[0] = 1, len[1] = -1。
常用的构造方法是均摊 \(O(n)\) 的，证明很简单，略。
代码：
char s[N], *now = s; std::array&amp;lt;int, 26&amp;gt; ch[N]; int fa[N], len[N], cnt, dep[N]; int jmp(int x) { for (; now[~len[x]] != *now; x = fa[x]) ; return x; } int ins(int x) { static int p, q; now++; if (!ch[p = jmp(p)][x]) { len[q = ++cnt] = len[p] + 2; fa[q] = ch[jmp(fa[p])][x]; ch[p][x] = q; dep[q] = dep[fa[q]] + 1; } return p = ch[p][x]; } int main() { std::ios::sync_with_stdio(false); std::cin.</description>
    </item>
    
    <item>
      <title>[Codeforces955D]Scissors</title>
      <link>https://blog.asukakyle.top/post/codeforces955dscissors/</link>
      <pubDate>Fri, 26 Mar 2021 17:56:38 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces955dscissors/</guid>
      <description>给定两个串 \(s,t\) 整数 \(k\) ,你可以在 \(s\) 中取出任意的两个不相交的长度为 \(k\) 串，将它们按顺序拼在一起形成一个新串。
求一种取串的方案使得 \(t\) 是新串的子串。
\(|s|,|t| \leq 5 \times 10^5\)。
kmp 算出正串和反串的能匹配 \(t\) 的前/后缀最大长度。
设 \(s\) 串的前缀 \([pre_1 \dots pre_i]\) 能匹配 \(t\) 的前缀集合为 \(P\)，后缀 \([suf_{i+1},suf_n]\) 能匹配 \(t\) 的后缀集合为 \(Q\)，只要判断是否存在 \(x\in P,y\in Q,x, y\leq k,x+y=|s|\) 即可。
类似 AC 自动机那样建出 fail 树，那么一个点能匹配的前缀长度集合就是在 fail 树上到根的路径，在正串 fail 树上维护集合 \(P\)，每次添加一个数 \(x\) 时，标记 \(k-x\) 对应在反串 fail 树上的点，每次查询反串 fail 树上一个点的祖先是否被标记。
具体实现时，标记一个点可以用子树加一，查询的时候单点查询即可。
复杂度 \(O(n \log n)\)。
#include &amp;lt;bits/stdc++.h&amp;gt; #define dbg(...) std::cerr &amp;lt;&amp;lt; &amp;quot;\033[32;1m&amp;quot;, fprintf(stderr, __VA_ARGS__), std::cerr &amp;lt;&amp;lt; &amp;quot;\033[0m&amp;quot; template &amp;lt;class T, class U&amp;gt; inline bool smin(T &amp;amp;x, const U &amp;amp;y) { return y &amp;lt; x ?</description>
    </item>
    
  </channel>
</rss>
