<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>线性基 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/</link>
    <description>Recent content in 线性基 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Mon, 12 Jul 2021 08:17:49 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[UOJ91]最大异或和</title>
      <link>https://blog.asukakyle.top/post/uoj91%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</link>
      <pubDate>Mon, 12 Jul 2021 08:17:49 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/uoj91%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</guid>
      <description>&gt; 有一个数列 $a_1,a_2,\dots,a_n$，每个 $a_i$ 都是小于 $2^m$ 的非负整数。 &gt; &gt; 现在需要实现三种操作，格式说明如下： &gt; &gt; - 1 *x* *y* *w*：对于所有 $x≤i≤y$，将 $a_i$ 修改为 $a_i\oplus w$。其中 $w$ 是一个小于 $2^m$ 的非负整数。 &gt; - 2 *x* *y* *w*：对于所有 $x≤i≤y$，将 $a_i$ 修改为 $w$。其中 $w$ 是一个小于 $2^m$ 的非负整数。 &gt; - 3：从 $a_1,a_2,⋯,a_n$ 中选出若干个数，使得选出的数异或和最大。请输出这个最大值。 &gt; &gt; 这里 $\oplus$ 表示按位异或运算，$x_1,x_2,⋯,x_l$ 的异或和是指 $x_1\oplus x_2\oplus \cdots\oplus x_l$。 &gt; &gt; $n,m,q≤2000$。 将原序列差分，线性基不变。 然后每次操作就是单点插入和删除，下面给出两种可删除线性基的写法。 ## 离线 记录存活时间，贪心。 ```cpp using BS = std::bitset&lt;2000&gt;; using PBI = std::pair; PBI base[2000]; void ins(PBI x) { for (int i = 1999; i &gt;= 0; i--) { if (!</description>
    </item>
    
    <item>
      <title>[Codeforces938G]Shortest Path Queries</title>
      <link>https://blog.asukakyle.top/post/cf938g/</link>
      <pubDate>Thu, 15 Apr 2021 17:26:44 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/cf938g/</guid>
      <description>&gt; 给定一个带权无向图，实现三种操作：加边，删边，询问两点间的异或最短路。 &gt; &gt; $n, m, q \leq 2\times 10^5$。 类似最大 xor 和路径，用线性基可以求解异或最短路。 因为线性基删除很麻烦，所以直接离线用线段树分治。 图可能不连通，需要用并查集维护连通性，然后记录每个点到当前根的异或和 $d_x$。 加边时设 $val = d_x\oplus d_y \oplus w$，如果 $x, y$ 已经联通则将 $val$ 加入当前联通块的线性基，如果不在一个并查集，连接两个根，边权为 $val$。 ```cpp #include #define perr(a...) fprintf(stderr, a) #define dbg(a...) perr(&#34;\033[32;1m&#34;), perr(a), perr(&#34;\033[0m&#34;) template inline bool smin(T &amp;x, const U &amp;y) { return y &lt; x ? x = y, 1 : 0; } template inline bool smax(T &amp;x, const U &amp;y) { return x &lt; y ?</description>
    </item>
    
    <item>
      <title>Gym102994</title>
      <link>https://blog.asukakyle.top/post/gym102994/</link>
      <pubDate>Thu, 15 Apr 2021 09:03:20 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/gym102994/</guid>
      <description>## 总览 | 题号 | A | B | C | D | E | F | G | H | I | J | K | L | M | |:--------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|---|---| | 完成情况 | 1 | 1 | 0 | 1 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | ## A. Everyone Loves Playing Games &gt; A 有 $N$ 对数， B 有 $M$ 对数，A 从 $N$ 对数中分别选一个数得到异或和 $X$，然后 B 从 $N$ 对数得到一个异或和 $Y$，$A$ 希望 $X \oplus Y$ 最大，$B$ 希望 $X \oplus Y$ 最小，求最后的结果。 &gt; &gt; $N, M \leq 10000, 0 \leq x \leq 10^{18}$。 设每对数为 $(x_i, y_i)$，先都选上 $x_i$，然后变成选或不选 $x_i \oplus y_i$ 的问题。 A 和 B 分别建出线性基，然后从高位向低位考虑。 只需要考虑某一位 A 和 B 都有影响的情况，这位如果为 1 那么 A B 只会选一个，如果为 0 则要么都选，要么都不选，不管哪种情况两种状态都可以通过异或 $A_i \oplus B_i$ 来相互转换，所以这种情况将 $A_i \oplus B_i$ 插入 $A$ 的线性基来提供“反悔”的机会。 ```cpp #include #include #define perr(a.</description>
    </item>
    
  </channel>
</rss>
