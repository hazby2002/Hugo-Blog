<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法笔记 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 算法笔记 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Fri, 20 May 2022 12:26:31 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>（半）在线卷积小记</title>
      <link>https://blog.asukakyle.top/post/%E5%8D%8A%E5%9C%A8%E7%BA%BF%E5%8D%B7%E7%A7%AF%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 20 May 2022 12:26:31 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%8D%8A%E5%9C%A8%E7%BA%BF%E5%8D%B7%E7%A7%AF%E5%B0%8F%E8%AE%B0/</guid>
      <description>前言 本文写于 2021-12-02 14:47，是上学期我研究的对于算法竞赛来说用处很小的东西。
今天想起，需要重新整理好二叉（半）在线卷积的模板，这个东西在考场上还是很有用的。
相关题目：
ABC230H 半在线卷积 设 \(H = FG\)。其中 \(G\) 的系数事先给出，\(F\) 的系数从低次到高次在线地给出，每次给出 \(F\) 的 \(x^i\) 系数后，你需要在线地计算 \(H\) 的 \(x^i\) 系数。
考虑分治，将区间 \([l, r)\) 分为 \(T\) 段，每段长度为 \(B = 2^k\)。 \[ [l=m_0, m_1), [m_1, m_2), \dots, [m_{T-1}, m_T=r) \] 要分别计算对于 \(0 \leq i &amp;lt; j &amp;lt; T\), \(F[m_i, m_{i+1})\) 对于 \(H[m_j, m_{j+1})\) 的贡献，其中 \(A[l,r)\) 表示多项式 \(A(x)\) 在 \(x^l, x^{l+1}, \dots, x^{r-1}\) 处的系数。
显然 \(F[m_i, m_{i+1})\) 要乘上 \(G[m_j-m_{i+1}+1, m_{j+1} - m_i)\)。</description>
    </item>
    
    <item>
      <title>常系数齐次线性递推小记</title>
      <link>https://blog.asukakyle.top/post/%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E9%80%92%E6%8E%A8%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 21 Feb 2022 23:11:13 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E9%80%92%E6%8E%A8%E5%B0%8F%E8%AE%B0/</guid>
      <description>常系数齐次线性递推 对于 \(n \geq k\)，\(\sum_{i=0}^kq_ia_{n-i}=0\)，其中 \(q_0 \neq 0\)。
数列 \(a_n\) 的生成函数为 \(A(x)\)。
上式左边看作卷积，右边看作生成函数 \(P(x)\) 的 \(n \geq k\) 时的系数。
\[ Q(x)A(x) = P(x) \] \[ A(x) = \frac{P(x)}{Q(x)} \]
\(P(x)\) 为 \(k-1\) 次多项式，\(Q(x)\) 为 \(k\) 次多项式。
然后就是解决 \([x^n]\dfrac{P(x)}{Q(x)}\) 的问题。
使用 EI 提到的方法，考虑 \[ \frac{P(x)}{Q(x)} = \frac{P(x)Q(-x)}{Q(x)Q(-x)} \] 由于 \(Q(x)Q(-x) = Q(-x)Q(x)\)，所以它只有偶次项有值，设 \(U(x^2) = Q(x)Q(-x)\)， \[ \frac{P(x)}{Q(x)} = \frac{E(x^2)}{U(x^2)}+x\frac{O(x^2)}{U(x^2)} \] 只需要递归到一侧即可。
朴素实现只需要写多项式乘法，优化的实现已经在多项式板子里。
int divAt(Poly p, Poly q, LL n) { for (; n; n &amp;gt;&amp;gt;= 1) { Poly r(q); for (int i = 1; i &amp;lt; r.</description>
    </item>
    
    <item>
      <title>「万能」Euclidean 算法小记</title>
      <link>https://blog.asukakyle.top/post/%E4%B8%87%E8%83%BD-euclidean-%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sun, 15 Aug 2021 21:24:32 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E4%B8%87%E8%83%BD-euclidean-%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</guid>
      <description>「万能」Euclidean 算法 \[ F(P, R, Q, N, X, Y) = \prod_{i = 0}^N \left(Y^{f(i) - f(i-1)}X\right) \]
其中 \(f(i) = \lfloor \dfrac{Pi+R}{Q}\rfloor, f(-1) = 0\)​。\(X, Y\) 为操作序列，有乘法结合律，类比矩阵 \(\in\) 半群 \((S, \times)\)。
若 \(R \geq Q\)​，则 \(f(i)= \lfloor \dfrac{Pi+(R \bmod Q)}{Q}\rfloor + \lfloor\dfrac{R}{Q}\rfloor\)​，所以 \[ F(P, R, Q, N, X, Y) = Y^{\lfloor\dfrac{R}{Q}\rfloor}F(P, R \bmod Q, Q, N, X, Y) \]
若 \(P \geq Q\)​，则 \(f(i)= \lfloor \dfrac{(P \bmod Q)i+R}{Q}\rfloor + \lfloor\dfrac{P}{Q}\rfloor i\)​，记 \(f&amp;#39;(i)= \lfloor \dfrac{(P \bmod Q)i+R}{Q}\rfloor\)​ \[ \begin{aligned} F(P, R, Q, N, X, Y) &amp;amp;= X\prod_{i = 1}^N Y^{f&amp;#39;(i) - f&amp;#39;(i-1)}Y^{\lfloor\dfrac{P}{Q}\rfloor}X\\ &amp;amp;= X\prod_{i = 0}^{N - 1} Y^{f&amp;#39;(i+1) - f&amp;#39;(i)}Y^{\lfloor\dfrac{P}{Q}\rfloor}X\\ &amp;amp;= XF(P \bmod Q, (P \bmod Q) + R, Q, N - 1, Y^{\lfloor\dfrac{P}{Q}\rfloor}X, Y) \end{aligned} \] 若 \(P &amp;lt; Q\)，考虑交换 \(X, Y\)。</description>
    </item>
    
    <item>
      <title>特征多项式小记</title>
      <link>https://blog.asukakyle.top/post/%E7%89%B9%E5%BE%81%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 12 Aug 2021 21:56:55 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E7%89%B9%E5%BE%81%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%B0%8F%E8%AE%B0/</guid>
      <description>Upper-Hessenberg 矩阵 \[ H_n = \begin{bmatrix} a_{0, 0} &amp;amp; a_{0, 1} &amp;amp; a_{0, 2} &amp;amp; a_{0, 3} &amp;amp; \cdots &amp;amp; a_{0, n - 1} &amp;amp; a_{0, n}\\ a_{1, 0} &amp;amp; a_{1, 1} &amp;amp; a_{1, 2} &amp;amp; a_{1, 3} &amp;amp; \cdots &amp;amp; a_{1, n - 1} &amp;amp; a_{1, n}\\ 0 &amp;amp; a_{2, 1} &amp;amp; a_{2, 2} &amp;amp; a_{2, 3} &amp;amp; \cdots &amp;amp; a_{2, n - 1} &amp;amp; a_{2, n}\\ 0 &amp;amp; 0 &amp;amp; a_{3, 2} &amp;amp; a_{3, 3} &amp;amp; \cdots &amp;amp; a_{3, n - 1} &amp;amp; a_{3, n}\\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \ddots &amp;amp; \ddots &amp;amp; \vdots &amp;amp; \vdots\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; a_{n - 1, n-2} &amp;amp; a_{n - 1, n - 1} &amp;amp; a_{n - 1, n}\\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; a_{n, n - 1} &amp;amp; a_{n, n} \end{bmatrix} \]</description>
    </item>
    
    <item>
      <title>Fast Walsh–Hadamard Transform</title>
      <link>https://blog.asukakyle.top/post/fwt/</link>
      <pubDate>Sun, 08 Aug 2021 12:55:13 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/fwt/</guid>
      <description>卷积 运算 \(\odot\)，序列 \(a, b, c\)，方阵 \(P, Q, R\) 满足 \(R\) 可逆，且 \[ \begin{cases} c_n &amp;amp;= \sum_{p \odot q = n}a_pb_q\\ \sum_j R_{i, j}c_j &amp;amp;= \sum_pP_{i,p}a_p\sum_q Q_{i, q}b_q \end{cases} \] 所以 \[ \begin{aligned} \sum_{j}R_{i, j}\sum_{p, q}[p\odot q = j]a_pb_q &amp;amp;= \sum_{p, q}P_{i, p}Q_{i, q}a_pb_q\\ \sum_{p, q}R_{i, p \odot q}a_pb_q &amp;amp;= \sum_{p, q}P_{i, p}Q_{i, q}a_pb_q\\ R_{i, p\odot q} &amp;amp;= P_{i, p}Q_{i, q} \end{aligned} \]
对序列 \(a\) 施加线性变换 \(P\)，序列 \(b\) 施加线性变换 \(Q\)，点乘之后再施加逆变换 \(R^{-1}\)，就可以实现 \(\odot\) 卷积。</description>
    </item>
    
    <item>
      <title>Min_25筛小记</title>
      <link>https://blog.asukakyle.top/post/min_25/</link>
      <pubDate>Sat, 07 Aug 2021 10:38:55 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/min_25/</guid>
      <description>min_25 筛 约定
\(\mathbf{P}\) 表示全体质数集合 \(p_i\) 表示第 \(i\) 个质数，特别地，\(p_0 =1\)。 \(\mathrm{lpf}_i\) 表示 \(i\)​ 的最小质因子。 计算数论函数 \(f(n)\)​​​​ 的前缀和，要求 \(f(p_i)\)​​​​ 是低阶多项式，且对于合数 \(n\)​​​​，\(f(n)\)​ 可以写成形如 \(f(n) = A(\mathrm{lpf}_n^e)B\left(\dfrac{n}{\mathrm{lpf_n^e}}\right)\)​​​​的式子，其中 \(A(p^e)\)​​​​ 可以快速求值或预处理。
当 \(f(n)\)​ 是积性函数时，\(A(p^e) = f(p^e), B(n) = f(n)\)​。
Part. 1 令 \[ g_k(n, i) = \sum_{j=1}^nj^k[j \in \mathbf{P} \ \mathrm{or}\ \mathrm{lpf}_j &amp;gt; p_i] \] 直观地，\(g_k(n, i)\) 表示埃式筛第 \(i\) 轮后剩余 \(n\) 以内的数的 \(k\) 次方之和。 \[ g_k(n, i) = \begin{cases} g_k(n, i - 1), &amp;amp; p_i^2 &amp;gt; n\\ g_k(n, i - 1) - p_i^k\left(g_k\left(\lfloor \dfrac{n}{p_i}\rfloor, i-1\right) - \sum_{j=1}^{i-1}p_j^k\right), &amp;amp; p_i^2 \leq n \end{cases} \] 直观地，考虑埃式筛第 \(i\) 轮：</description>
    </item>
    
    <item>
      <title>LGV 引理小记</title>
      <link>https://blog.asukakyle.top/post/lgv-lemma/</link>
      <pubDate>Fri, 30 Jul 2021 16:40:08 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/lgv-lemma/</guid>
      <description>LGV 引理 设 \(G(V, E)\) 是一个 DAG，起点集 \(A = \{a_1, \dots, a_n\} \subseteq V\)，终点集 \(B = \{b_1, \dots, b_n\} \subseteq V\) 。
记 \(\omega_e\) 表示有向边 \(e\) 的边权，\(\omega_e\) 属于某个交换环。
对于有向路径 \(P\)，定义 \(\omega(P)\) 表示路径上边权的乘积，即 \[ \omega(P) = \prod\limits_{e \in P} \omega_e \] 对于任意两点 \(a, b\)，记 \(e(a, b)\) 表示从 \(a\) 到 \(b\) 的所有路径的权值之和，即 \[ e(a, b) = \sum\limits_{P:a\to b}\omega(P) \] 特别地，若 \(\omega_e=1\) ，\(e(a, b)\) 表示 从 \(a\) 到 \(b\) 的路径数。
记矩阵 \[ M = \begin{pmatrix} e(a_1, b_1) &amp;amp; e(a_1, b_2) &amp;amp; \cdots &amp;amp; e(a_1, b_n)\\ e(a_2, b_1) &amp;amp; e(a_2, b_2) &amp;amp; \cdots &amp;amp; e(a_2, b_n)\\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots\\ e(a_n, b_1) &amp;amp; e(a_n, b_2) &amp;amp; \cdots &amp;amp; e(a_n, b_n)\\ \end{pmatrix} \] 定义从 \(A\) 到 \(B\) 的 \(n\) 元不相交路径组表示 \(G\) 中的 \(n\) 条有向路径 \((P_1, \dots, P_n)\) 满足：</description>
    </item>
    
    <item>
      <title>回文树小记</title>
      <link>https://blog.asukakyle.top/post/pam/</link>
      <pubDate>Wed, 14 Jul 2021 17:02:30 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/pam/</guid>
      <description>基本元素 节点：原串的一个本质不同的回文子串。
长度 len[o]：回文子串长度。
转移边 ch[o][x]：两边同时加字符 \(x\)。
失配边 fa[o]：最长回文后缀。到根的路径是所有回文后缀。
有两个根，奇根1 和 偶根0，fa[0] = 1, len[1] = -1。
常用的构造方法是均摊 \(O(n)\) 的，证明很简单，略。
代码：
char s[N], *now = s; std::array&amp;lt;int, 26&amp;gt; ch[N]; int fa[N], len[N], cnt, dep[N]; int jmp(int x) { for (; now[~len[x]] != *now; x = fa[x]) ; return x; } int ins(int x) { static int p, q; now++; if (!ch[p = jmp(p)][x]) { len[q = ++cnt] = len[p] + 2; fa[q] = ch[jmp(fa[p])][x]; ch[p][x] = q; dep[q] = dep[fa[q]] + 1; } return p = ch[p][x]; } int main() { std::ios::sync_with_stdio(false); std::cin.</description>
    </item>
    
    <item>
      <title>莫队小记</title>
      <link>https://blog.asukakyle.top/post/%E8%8E%AB%E9%98%9F/</link>
      <pubDate>Mon, 12 Jul 2021 15:21:22 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E8%8E%AB%E9%98%9F/</guid>
      <description>莫队二次离线 从 \([x, y]\) 移动到 \([l, r]\)。
\(x \to l\)
查询 \(a_i\) 在区间 \([i+1, y]\) 的贡献，拆成两个前缀 \(i, y\)，预处理 \(a_{i-1}\) 对前缀 \(i-1\) 的贡献，设贡献的前缀和为 \(pre_1[i]\)。
\(x&amp;lt;l\)
删除 \(a_{x} \dots a_{l-1}\)。
减前缀 \(y\) 的贡献、加前缀 \(i\) 的贡献。
离线 \(\{y, x, l-1,-1\}, \Delta ans= pre_1[l] - pre_1[x]\)。
\(x&amp;gt;l\)
加入 \(a_l\dots a_{x-1}\)。
加前缀 \(y\) 的贡献、减前缀 \(i\) 的贡献。
离线 \(\{y, l, x-1,+1\}, \Delta ans= pre_1[l] - pre_1[x]\)。
\(y\to r\)
查询 \(a_i\) 在区间 \([x, i-1]\) 的贡献，拆成两个前缀 \(x-1, i-1\)，预处理 \(a_{i}\) 对前缀 \(i-1\) 的贡献，设贡献的前缀和为 \(pre_2[i]\)。</description>
    </item>
    
    <item>
      <title>数论知识总结</title>
      <link>https://blog.asukakyle.top/post/%E6%95%B0%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 19 Mar 2021 10:28:29 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E6%95%B0%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>1 欧几里得算法 欧几里得算法可以求两个数的最大公约数 \(\gcd(a, b)\)。
不妨设 \(a \geq b, a = kb + r(k \geq 1, 0 \leq r &amp;lt; b)\)。
一方面，设 \(d_1\) 为 \(a, b\) 的一个公约数，则 \[ \begin{aligned} a &amp;amp;= k_ad_1\\ b &amp;amp;= k_bd_1\\ r &amp;amp;= a - kb\\ &amp;amp;= (k_a - kk_b)d_1 \end{aligned} \] 即 \(d_1\) 也是 \(r\) 的约数，\(b, r\) 的公约数。
另一方面，设 \(d_2\) 为 \(b, r\) 的一个公约数，则 \[ \begin{aligned} b &amp;amp;= k&amp;#39;_bd_2\\ r &amp;amp;= k_r&amp;#39;d_2\\ a &amp;amp;= kb + r\\ &amp;amp;= (kk&amp;#39;_b + k_r&amp;#39;)d_2 \end{aligned} \] 即 \(d_2\) 也是 \(a\) 的约数，\(a, b\) 的公约数。</description>
    </item>
    
    <item>
      <title>李超线段树和set维护凸包</title>
      <link>https://blog.asukakyle.top/post/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%92%8Cset%E7%BB%B4%E6%8A%A4%E5%87%B8%E5%8C%85/</link>
      <pubDate>Thu, 18 Mar 2021 21:30:30 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%92%8Cset%E7%BB%B4%E6%8A%A4%E5%87%B8%E5%8C%85/</guid>
      <description>问题引入 有一些点 \((a_i, b_i)\)，需要多次询问 \(\max\{ax_0+b\}\)。
李超线段树 利用李超线段树可以很好地维护上述信息。
李超线段树就是支持 \(O(\log N)\) 插入直线和查询 \(\max{L_i(x)}\) 的数据结构。
线段树的每个节点保存 \(L(mid)\) 最大的那条直线。
插入一条直线时，比较 \(L_{old}(mid)\) 和 \(L_{new}(mid)\)，较大者保留，较小者继续递归。
constexpr int N(1e5 + 5); struct Line { LL k, b; LL f(int x) { return k * x + b; } } t[N &amp;lt;&amp;lt; 2]; #define ls o &amp;lt;&amp;lt; 1 #define rs o &amp;lt;&amp;lt; 1 | 1 void ins(int o, int l, int r, Line x) { int m = l + r &amp;gt;&amp;gt; 1; bool lv = x.</description>
    </item>
    
    <item>
      <title>Fast Fourier Transform</title>
      <link>https://blog.asukakyle.top/post/fft/</link>
      <pubDate>Thu, 18 Mar 2021 15:28:59 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/fft/</guid>
      <description>Introduction 快速傅里叶变换(Fast Fourier Transform，FFT)是一种可在 \(O(n \log n)\) 时间内完成的离散傅里叶变换 (Discrete Fourier Transform，DFT) 的算法，用来实现将信号从原始域（通常是时间或空间）到频域的互相转化。
FFT 在算法竞赛中主要用来加速多项式乘法（循环卷积）。
多项式 形如 \[ A(x) = a_0 + a_1x + a_2x^2 + \dots + a_{n-1}x^{n - 1} \] 的式子称为 \(x\) 的 \(n - 1\) 次多项式，其中 \(a_0, a_1, \dots, a_{n - 1}\) 称为多项式系数，\(n-1\) 称为多项式的次数，记为 \(\deg A(x)\) 或 \(\deg A\)。
点值 \(n - 1\) 次多项式 \(A(x)\) 在 \(x = m\) 处的点值 \[ A(m) = \sum_{k=0}^{n-1} a_km^k \]
多项式乘法 记 \(A(x)\times B(x)\) 表示多项式 \(A(x), B(x)\) 做多项式乘法，可以简写为 \(A(x)\cdot B(x)\) 或 \(A(x)B(x)\)。</description>
    </item>
    
  </channel>
</rss>
