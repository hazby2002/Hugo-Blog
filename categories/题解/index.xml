<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>题解 on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/categories/%E9%A2%98%E8%A7%A3/</link>
    <description>Recent content in 题解 on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Thu, 29 Jul 2021 18:01:33 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/categories/%E9%A2%98%E8%A7%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2021杭电多校4</title>
      <link>https://blog.asukakyle.top/post/2021hdu4/</link>
      <pubDate>Thu, 29 Jul 2021 18:01:33 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu4/</guid>
      <description>总览   题号 题目 完成情况    6985 Calculus 通过  6986 Kanade Loves Maze Designing 通过  6987 Cycle Binary   6988 Display Substring   6989 Didn’t I Say to Make My Abilities Average in the Next Life?! 通过  6990 Directed Minimum Spanning Tree   6991 Increasing Subsequence 通过  6992 Lawn of the Dead 通过  6993 License Plate Recognition 通过  6994 Pony Running   6995 Travel on Tree     Calculus 签到题，常数不是 0 的都不收敛。</description>
    </item>
    
    <item>
      <title>2021杭电多校3</title>
      <link>https://blog.asukakyle.top/post/2021hdu3/</link>
      <pubDate>Tue, 27 Jul 2021 20:39:53 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu3/</guid>
      <description>题号 题目 完成情况    6973 Bookshop 通过  6974 Destinations 通过  6975 Forgiving Matching 通过  6976 Game on Plane 通过  6977 Kart Race 通过  6978 New Equipments II   6979 Photoshop Layers 通过  6980 Restore Atlantis II   6981 Rise in Price 通过  6982 Road Discount 通过  6983 Segment Tree with Pruning 通过  6984 Tree Planting     Bookshop  给定一棵树，每个点有个权值 \(w_i\)，\(m\) 次询问，给出 \(x, y, z\)，表示从 \(x\) 走到 \(y\)，每经过一个点 \(i\)，如果 \(z \geq w_i\) 则 \(z -= w_i\)，最终 \(z\) 是多少。</description>
    </item>
    
    <item>
      <title>2021杭电多校2</title>
      <link>https://blog.asukakyle.top/post/2021hdu2/</link>
      <pubDate>Thu, 22 Jul 2021 18:50:15 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu2/</guid>
      <description>总览   题号 题目 完成情况    6961 I love cube 通过  6962 I love tree 通过  6963 I love playing games   6964 I love counting 通过  6965 I love string 通过  6966 I love sequences   6967 I love data structure 通过  6968 I love exam 通过  6969 I love triples 通过  6970 I love permutation   6971 I love max and multiply 通过    I love cube 队友切了</description>
    </item>
    
    <item>
      <title>2021牛客多校2</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder2/</link>
      <pubDate>Wed, 21 Jul 2021 13:31:31 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder2/</guid>
      <description>总览   题号 标题 团队的状态    A Arithmetic Progression 通过  B Cannon 通过  C Draw Grids 通过  D Er Ba Game 通过  E Gas Station 通过  F Girlfriend 通过  G League of Legends 通过  H Olefin 未通过  I Penguins 通过  J Product of GCDs 通过  K Stack 通过  L WeChat Walk 通过    Arithmetic Progression  给定每个元素互不相同的序列 \(a_n\)，求排序后能构成等差数列的区间个数。</description>
    </item>
    
    <item>
      <title>2021杭电多校1</title>
      <link>https://blog.asukakyle.top/post/2021hdu1/</link>
      <pubDate>Tue, 20 Jul 2021 18:20:13 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu1/</guid>
      <description>Mod, Or and Everything 队友切了。
Rocket land Puzzle loop 设每个边有没有为 0/1，列方程组解异或方程，求自由元个数。
// Author: HolyK // Created: Tue Jul 20 17:38:11 2021 #include &amp;lt;bits/stdc++.h&amp;gt; #define dbg(a...)fprintf(stderr,a) template &amp;lt;class T, class U&amp;gt; inline bool smin(T &amp;amp;x, const U &amp;amp;y) {  return y &amp;lt; x ? x = y, 1 : 0; } template &amp;lt;class T, class U&amp;gt; inline bool smax(T &amp;amp;x, const U &amp;amp;y) {  return x &amp;lt; y ? x = y, 1 : 0; }  using LL = long long; using PII = std::pair&amp;lt;int, int&amp;gt;; constexpr int P(998244353); inline void inc(int &amp;amp;x, int y) {  x += y;  if (x &amp;gt;= P) x -= P; } int fpow(int x, int k = P - 2) {  int r = 1;  for (; k; k &amp;gt;&amp;gt;= 1, x = 1LL * x * x % P) {  if (k &amp;amp; 1) r = 1LL * r * x % P;  }  return r; } constexpr int N(17 * 16 * 2 + 5); using BTS = std::bitset&amp;lt;N&amp;gt;; BTS p[N], tmp; bool ins(BTS &amp;amp;x) {  for (int i = N - 1; i &amp;gt;= 0; i--) {  if (!</description>
    </item>
    
    <item>
      <title>[UOJ91]最大异或和</title>
      <link>https://blog.asukakyle.top/post/uoj91%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</link>
      <pubDate>Mon, 12 Jul 2021 08:17:49 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/uoj91%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</guid>
      <description>有一个数列 \(a_1,a_2,\dots,a_n\)，每个 \(a_i\) 都是小于 \(2^m\) 的非负整数。
现在需要实现三种操作，格式说明如下：
 1 x y w：对于所有 \(x≤i≤y\)，将 \(a_i\) 修改为 \(a_i\oplus w\)。其中 \(w\) 是一个小于 \(2^m\) 的非负整数。 2 x y w：对于所有 \(x≤i≤y\)，将 \(a_i\) 修改为 \(w\)。其中 \(w\) 是一个小于 \(2^m\) 的非负整数。 3：从 \(a_1,a_2,⋯,a_n\) 中选出若干个数，使得选出的数异或和最大。请输出这个最大值。  这里 \(\oplus\) 表示按位异或运算，\(x_1,x_2,⋯,x_l\) 的异或和是指 \(x_1\oplus x_2\oplus \cdots\oplus x_l\)。
\(n,m,q≤2000\)。
 将原序列差分，线性基不变。
然后每次操作就是单点插入和删除，下面给出两种可删除线性基的写法。
离线 记录存活时间，贪心。
using BS = std::bitset&amp;lt;2000&amp;gt;; using PBI = std::pair&amp;lt;BS, int&amp;gt;; PBI base[2000]; void ins(PBI x) {  for (int i = 1999; i &amp;gt;= 0; i--) {  if (!</description>
    </item>
    
    <item>
      <title>[ICPC2014 WF]Pachinko</title>
      <link>https://blog.asukakyle.top/post/icpc2014-wfpachinko/</link>
      <pubDate>Mon, 12 Jul 2021 08:12:01 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/icpc2014-wfpachinko/</guid>
      <description>有一个 \(h×w\) 的方格表，有些格子是墙，有些格子是终点，剩下的格子是空地。
你现在要在这里进行随机游走，其中，每一轮向上、下、左、右的概率分别为 \(u\%,d\%,l\%,r\%\)，如果移动后超过方格表或到达墙，则这次移动失效，保持原地不动。
当你到达终点时，游戏就结束了。现在，在方格表第一行的所有空地中均匀随机一个作为起点，求你就进入每个终点的概率。
\(1≤w≤20, 2≤h≤10000\)。
 设其中一个终点为 \(t\)，\(f_{i, j}\) 表示 \((i, j)\) 走到 \(t\) 的概率。 \[ f_{i, j} = uf_{i-1, j}+df_{i+1, j}+lf_{i, j-1}+rf_{i, j+1} \]
\[ f_{i, j} - uf_{i-1, j} - df_{i+1, j} - lf_{i, j-1} - rf_{i, j+1}=0 \]
\[ f_t=1 \]
\[ P\cdot\mathbf{f}=\mathbf{e} \]
\(P\) 是 \(wh \times wh\) 的方阵，\(\mathbf{f},\mathbf{e}\) 是列向量。其中 \(e_i=[i=t]\)。 \[ \mathbf{f}=P^{-1}\mathbf{f} \] 设 \(1\dots s\) 为起点 ，答案为 \[ ans = \frac1s \sum_{i=1}^sf_i \] 写成矩阵的形式，设行向量 \(\mathbf{v}^T=\begin{pmatrix} 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; \cdots &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots \end{pmatrix}\)，前面有 \(s\) 个1，其他都是0。 \[ \begin{aligned} ans &amp;amp;= \frac1s \mathbf{v}^T\mathbf{f}\\ &amp;amp;= \frac1s\mathbf{v}^TP^{-1}\mathbf{e}\\ \end{aligned} \] 相当于求行向量 \(\alpha^T = \dfrac1s\mathbf{v}^TP^{-1}\) 第 \(t\) 维的值，所以只要求出这个行向量即可。 \[ \alpha^T P = \frac1s\mathbf{v} \]</description>
    </item>
    
    <item>
      <title>[Codeforces938G]Shortest Path Queries</title>
      <link>https://blog.asukakyle.top/post/cf938g/</link>
      <pubDate>Thu, 15 Apr 2021 17:26:44 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/cf938g/</guid>
      <description>给定一个带权无向图，实现三种操作：加边，删边，询问两点间的异或最短路。
\(n, m, q \leq 2\times 10^5\)。
 类似最大 xor 和路径，用线性基可以求解异或最短路。
因为线性基删除很麻烦，所以直接离线用线段树分治。
图可能不连通，需要用并查集维护连通性，然后记录每个点到当前根的异或和 \(d_x\)。
加边时设 \(val = d_x\oplus d_y \oplus w\)，如果 \(x, y\) 已经联通则将 \(val\) 加入当前联通块的线性基，如果不在一个并查集，连接两个根，边权为 \(val\)。
#include &amp;lt;bits/stdc++.h&amp;gt; #define perr(a...)fprintf(stderr,a) #define dbg(a...)perr(&amp;quot;\033[32;1m&amp;quot;),perr(a),perr(&amp;quot;\033[0m&amp;quot;) template &amp;lt;class T, class U&amp;gt; inline bool smin(T &amp;amp;x, const U &amp;amp;y) {  return y &amp;lt; x ? x = y, 1 : 0; } template &amp;lt;class T, class U&amp;gt; inline bool smax(T &amp;amp;x, const U &amp;amp;y) {  return x &amp;lt; y ?</description>
    </item>
    
    <item>
      <title>Gym102994</title>
      <link>https://blog.asukakyle.top/post/gym102994/</link>
      <pubDate>Thu, 15 Apr 2021 09:03:20 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/gym102994/</guid>
      <description>总览   题号 A B C D E F G H I J K L M    完成情况 1 1 0 1 1 1 1 0 0 1 1 1 0    A. Everyone Loves Playing Games  A 有 \(N\) 对数， B 有 \(M\) 对数，A 从 \(N\) 对数中分别选一个数得到异或和 \(X\)，然后 B 从 \(N\) 对数得到一个异或和 \(Y\)，\(A\) 希望 \(X \oplus Y\) 最大，\(B\) 希望 \(X \oplus Y\) 最小，求最后的结果。</description>
    </item>
    
    <item>
      <title>Gym102441</title>
      <link>https://blog.asukakyle.top/post/gym102441/</link>
      <pubDate>Thu, 08 Apr 2021 22:39:55 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/gym102441/</guid>
      <description>总览   题号 A B C D E F G H I J K    完成情况 1 0 1 1 1 1 1 1 1 1 0    A. Template for Search  给定由小写字母、字符* 和 ? 组成的字符串 \(s\)，其中 * 可以被替换成任意串（包括空串），? 可以被替换成任意字符，求 \(s\) 可以表示成的最短回文串。
\(1 \leq |s| \leq 500\)。
 设 \(dp[l][r]\) 表示 \(l \dots r\) 能组成的最短回文串，有三种转移：
 \(s_l\) 匹配 \(s_r\) \(s_l = *\) 匹配右边一段 \(s_r = *\) 匹配左边一段  B.</description>
    </item>
    
    <item>
      <title>[Codeforces955D]Scissors</title>
      <link>https://blog.asukakyle.top/post/codeforces955dscissors/</link>
      <pubDate>Fri, 26 Mar 2021 17:56:38 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces955dscissors/</guid>
      <description>给定两个串 \(s,t\) 整数 \(k\) ,你可以在 \(s\) 中取出任意的两个不相交的长度为 \(k\) 串，将它们按顺序拼在一起形成一个新串。
求一种取串的方案使得 \(t\) 是新串的子串。
\(|s|,|t| \leq 5 \times 10^5\)。
 kmp 算出正串和反串的能匹配 \(t\) 的前/后缀最大长度。
设 \(s\) 串的前缀 \([pre_1 \dots pre_i]\) 能匹配 \(t\) 的前缀集合为 \(P\)，后缀 \([suf_{i+1},suf_n]\) 能匹配 \(t\) 的后缀集合为 \(Q\)，只要判断是否存在 \(x\in P,y\in Q,x, y\leq k,x+y=|s|\) 即可。
类似 AC 自动机那样建出 fail 树，那么一个点能匹配的前缀长度集合就是在 fail 树上到根的路径，在正串 fail 树上维护集合 \(P\)，每次添加一个数 \(x\) 时，标记 \(k-x\) 对应在反串 fail 树上的点，每次查询反串 fail 树上一个点的祖先是否被标记。
具体实现时，标记一个点可以用子树加一，查询的时候单点查询即可。
复杂度 \(O(n \log n)\)。
#include &amp;lt;bits/stdc++.h&amp;gt; #define dbg(.</description>
    </item>
    
    <item>
      <title>[Codeforces1413F]Roads and Ramen</title>
      <link>https://blog.asukakyle.top/post/codeforces1413froads-and-ramen/</link>
      <pubDate>Fri, 19 Mar 2021 10:09:39 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces1413froads-and-ramen/</guid>
      <description>给定一棵 \(n\) 个点的无根树，每条边都有标记0或1。现在有 \(m\) 次操作，每次操作将第 \(id\) 条边的标记异或1。在每次操作后输出当前树上最长的有偶数个1的路径长度。
\(n,m \leq 5 \times 10^5\)。
 动态DP 设 \(dp[x][0/1]\) 表示 \(x\) 向下有偶数/奇数个1的最长路径，\(dp[x][2]\) 表示 \(x\) 子树内偶数个1的直径。
容易写出转移（\(val_y\) 表示 \(y\) 的父边的权值）： \[ \begin{aligned} dp&amp;#39;[x][0] &amp;amp;= \max\{dp[x][0], dp[y][val_y] + 1\}\\ dp&amp;#39;[x][1] &amp;amp;= \max\{dp[x][1], dp[y][val_y \oplus 1] + 1\}\\ dp&amp;#39;[x][2] &amp;amp;= \max\{dp[x][0] + dp[y][val_y] + 1, dp[x][1] + dp[y][val_y \oplus 1] + 1, dp[x][2],dp[y][2]\} \end{aligned} \] 改写成 \(x\) 从重儿子 \(y\) 转移的矩阵（这里以 \(val_y = 0\) 为例）： \[ \begin{bmatrix} dp&amp;#39;[x][0]\\ dp&amp;#39;[x][1]\\ dp&amp;#39;[x][2]\\ 0 \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; -\infty &amp;amp; -\infty &amp;amp; dp[x][0]\\ -\infty &amp;amp; 1 &amp;amp; -\infty &amp;amp; dp[x][1]\\ dp[x][0] + 1 &amp;amp; dp[x][1] + 1 &amp;amp; 0 &amp;amp; dp[x][2]\\ -\infty &amp;amp; -\infty &amp;amp; -\infty &amp;amp; 0 \end{bmatrix} \begin{bmatrix} dp[y][0]\\ dp[y][1]\\ dp[y][2]\\ 0 \end{bmatrix} \] 上面的 \(dp[x]\) 是指排除掉 \(x\) 重儿子的答案，\(dp&amp;#39;[x]\) 是指完整的 \(x\) 的答案。</description>
    </item>
    
    <item>
      <title>[Codechef CCC]Hit the Coconuts</title>
      <link>https://blog.asukakyle.top/post/codechef-ccchit-the-coconuts/</link>
      <pubDate>Thu, 18 Mar 2021 21:51:42 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codechef-ccchit-the-coconuts/</guid>
      <description>题意： \(N\) 个椰子, 第 \(i\) 个需要敲 \(a_i\) 下才能打开，问最坏情况下最少要敲多少下才能打开 \(k\) 个椰子。
 不妨设 \(a_i \le a_{i + 1}\)。
要敲开一个椰子，现在有两种方法：
随便拿起一个椰子不停地敲，最多要 \(a_n\) 次。 有目的性地想要敲开某个椰子 \(a_i\)，可以发现最优的策略就是每个椰子都敲 \(a_i\) 次，最多要敲 \(a_i\times(n - i + 1)\) 次，所有情况下取最小值。  第二种情况实际上包含了第一种。
那么要敲开 \(k\) 个椰子，也有两种方法：
每次都随便拿一个敲开，最多要 \(a_n + a_{n - 1}+ \dots + a_{n - k + 1}\) 次。 选 \(k\) 个椰子 \(a_{b_1}, a_{b_2}, \dots, a_{b_k}(b_i &amp;lt; b_{i + 1})\)，有目的性地敲开它们。发现最优策略下最多要敲 \(\sum_{i = 1}^k (a_{b_i} - a_{b_i - 1}) \times (n - b_i + 1)\) 次，其中 \(a_{b_0} = 0\)，所有情况下取最小值。  第二种情况也包含了第一种。</description>
    </item>
    
    <item>
      <title>[PKUWC2018]猎人杀</title>
      <link>https://blog.asukakyle.top/post/pkuwc2018%E7%8C%8E%E4%BA%BA%E6%9D%80/</link>
      <pubDate>Thu, 18 Mar 2021 21:47:16 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/pkuwc2018%E7%8C%8E%E4%BA%BA%E6%9D%80/</guid>
      <description>\(n\) 个人，每个人有个权值 \(a_i\)。进行 \(n\) 轮操作，每轮开枪杀死一个人，\(i\) 被杀死的概率 \(p_i=\dfrac{a_i}{\sum_{x\ is\ alive}a_x}\) ，求最后死的那个人是 \(1\) 的概率。答案对 \(998244353\) 取模。
\(a_i &amp;gt; 0, 1 \le \sum a_i \le 10^5\)。
 设 \(s = \sum_{i=1}^na_i,w=\sum_{x\ is\ alive}a_x\)，那么有 \[ \begin{aligned} p_i &amp;amp;= \frac{a_i}{w}\\ \frac wsp_i &amp;amp;= \frac {a_i}{s}\\ p_i &amp;amp;= \frac {a_i}{s} + \frac{s - w}s p_i \end{aligned} \] 最后的这个式子可以理解为，每次开枪的目标是所有活人和死人，如果打到活人就会杀死他，如果打到死人不算，重打。
这样变成进行无限轮，每轮的目标都是所有人，打到某个人的概率更容易表示。
然后考虑容斥，设 \(A = \{ a_2, a_3, \dots, a_n \}\)， \(1\) 在第 \(r\) 轮被打死，且至少有 \(k\) 个人在 \(1\) 之后被打死。 \[ \begin{aligned} ans &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \sum_{r = 1}^{\infty} \left(\frac{s - a_1 - \sum_{i \in S} a_i}{s}\right)^{r - 1} \cdot \frac{a_1}{s}\\ &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \frac{a_1}{s} \cdot \sum_{r = 0}^{\infty} \left(\frac{s - a_1 - \sum_{i \in S} a_i}{s}\right)^{r}\\ &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \frac{a_1}{s} \cdot \frac{1}{1 - \dfrac{s - a_1 - \sum_{i \in S} a_i}{s}}\\ &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \frac{a_1}{a_1 + \sum_{i \in S} a_i}\\ &amp;amp;= \sum_{k = 0}^{s - a_1} \frac{a_1}{a_1 + k} \times \sum_{S \subseteq A, \sum_{i \in S} a_i = k} (-1)^{|S|}\\ &amp;amp;= \sum_{k = 0}^{s - a_1} \frac{a_1}{a_1 + k} \times [x^k] \prod_{i=2}^n(1 - x^{a_i}) \end{aligned} \] 分治求 \(\prod_{i=2}^n(1 - x^{a_i})\) 即可，复杂度 \(O(n \log n \log s)\) 。</description>
    </item>
    
    <item>
      <title>[Codeforces1148H] Holy Diver</title>
      <link>https://blog.asukakyle.top/post/codeforces1148h-holy-diver/</link>
      <pubDate>Sat, 13 Mar 2021 00:43:08 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces1148h-holy-diver/</guid>
      <description>给定一个最初为空的数组，然后进行 \(n\) 次操作，每次操作给定 \(x,l,r,k\)，在数组末尾插入 \(x\) ，然后查询满足 \(mex(\{a_i, a_{i + 1}, \dots, a_j\}) = k\) 的数对 \((i,j)\) 的个数，强制在线。
\(mex(S)\) 表示集合 \(S\) 中最小的未出现的 自然数。
\(n \leq 2 \times 10^5\)。
 为表示方便，下面记 \(mex(i, j) = mex(\{a_i, a_{i + 1}, \dots, a_j\})\)。
容易发现，如果向集合 \(S\) 中添加数，\(mex(S)\) 不会减小。
所以如果固定右端点 \(j\)，\(mex(i, j)\) 是非严格单调减的；固定左端点 \(i\)，\(mex(i, j)\) 是非严格单调增的。
维护一个 \(n \times n\) 矩阵，\(A[i][j] = mex(j, i)\)，则矩阵 \(A\) 的每一行从左到右都是非严格单调减的，每一列从上到下都是非严格单调增的。
第 \(i\) 次操作增加一个数 \(x\)，考虑从第 \(i - 1\) 行拓展到第 \(i\) 行时矩阵 \(A\) 的变化。</description>
    </item>
    
    <item>
      <title>[Codeforces566C] Logistical Questions</title>
      <link>https://blog.asukakyle.top/post/codeforces566c-logistical-questions/</link>
      <pubDate>Mon, 07 Dec 2020 21:36:10 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces566c-logistical-questions/</guid>
      <description>一棵 \(n\) 个节点的树，点有点权，边有边权。求这棵树的一个点 \(r\) 使下面的式子最小： \[ \sum_{i \in Tree} val_i \times dist(i, r)^{\frac32} \] \(n \le 2 \times 10^5, val_i, dist(u, v) \ge 0\)。
 带权重心问题，有点妙。
设 \[ f(x) = \sum_{i \in Tree} val_i \times dist(i, x)^{\frac32} \] 这里函数 \(f\) 的定义域是整棵树（不仅包括原来的点，还包括边上的点 ）。
下面研究这个函数的性质。
树上的函数显然不太方便研究，所以考虑换一个 \(\mathbf R\) 上的函数研究。
随便选择一条树上路径 \(u \rightarrow v\) 作为 \(x\) 轴，把 \(u\) 当作原点，这样 \(x\) 就是路径上的点到 \(u\) 的距离。
这里以 \(0 \rightarrow 5\) 为例，节点 \(6 \dots 11\) 分别代表其父亲的一些子树。</description>
    </item>
    
  </channel>
</rss>
