<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HolyK&#39;s Blog</title>
    <link>https://blog.asukakyle.top/post/</link>
    <description>Recent content in Posts on HolyK&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC BY-NC-SA 4.0</copyright>
    <lastBuildDate>Thu, 19 Aug 2021 20:20:26 +0800</lastBuildDate><atom:link href="https://blog.asukakyle.top/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【置顶】多项式板子修订日记</title>
      <link>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E6%97%A5%E8%AE%B0/</link>
      <pubDate>Wed, 11 Aug 2021 20:59:52 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9D%BF%E5%AD%90%E4%BF%AE%E8%AE%A2%E6%97%A5%E8%AE%B0/</guid>
      <description>Basic 主要功能列表  using Poly = std::vector&amp;lt;int&amp;gt;;：用 vector 表示多项式。 void dft/idft(int *a, n);：长度为 \(n\) 的 dft/idft，需要保证 \(n = 2^k\)。 void dft/idft(Poly &amp;amp;a);：参数为多项式的dft/idft。 Poly operator*(Poly a, Poly b)：多项式乘法。 Poly operator+(Poly a, Poly b)：多项式加法。 Poly operator-(Poly a, Poly b)：多项式减法。 Poly operator/(Poly a, Poly b)：多项式除法。 std::pair&amp;lt;Poly, Poly&amp;gt; operator%(Poly a, Poly b)：多项式取模。 Poly inverse(Poly a);：多项式乘法逆。 Poly sqrt(Poly a);：多项式开根。 Poly deriv(Poly a);：多项式求导。 Poly integ(Poly a);：多项式积分。 Poly ln(Poly a);：多项式对数函数。 Poly expNewton(Poly a);：多项式指数函数（牛顿迭代，需要保证长度为 2 的幂）。 Poly exp2(Poly a);：多项式指数函数（半在线卷积）。 Poly exp(Poly a);：多项式指数函数（优化半在线卷积）。 Poly power(Poly a, int k);：多项式幂函数。 Poly power(Poly a, int k1, int k2);：多项式幂函数（模数对 \(P\) 和 \(\varphi(P)\) 取模）。 Poly divAt(Poly p, Poly q, LL n);：计算 \([x^n]\dfrac{P(x)}{Q(x)}\)。  2021/8/11  int divAt(Poly p, Poly q, LL n);：增加 \([x^n]\dfrac{P(x)}{Q(x)}\)，并稍微卡了卡常。 expNewton, exp2, exp：牛顿迭代exp改名，分别增加 \(O\left(n \log^2n\right)\) 和 \(O\left(\dfrac{n \log^2n}{\log\log n}\right)\) 半在线卷积求多项式 Exp。（由于懒得写递归的，顺便发明了多叉cdq分治迭代版） invRec, inverse：原求逆需要长度为 2 的幂，保留为 invRec，增加新的 inverse，不需要保证长度。现在所有多项式操作（除了 dft, idft, expNewton）均不要求长度为 2 的幂。  namespace Polynomial { using Poly = std::vector&amp;lt;int&amp;gt;; constexpr int P(998244353), G(3); inline void inc(int &amp;amp;x, int y) { (x += y) &amp;gt;= P ?</description>
    </item>
    
    <item>
      <title>2021多校总结</title>
      <link>https://blog.asukakyle.top/post/2021%E5%A4%9A%E6%A0%A1%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 19 Aug 2021 20:20:26 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021%E5%A4%9A%E6%A0%A1%E6%80%BB%E7%BB%93/</guid>
      <description>一事无成。</description>
    </item>
    
    <item>
      <title>2021杭电多校10</title>
      <link>https://blog.asukakyle.top/post/2021hdu10/</link>
      <pubDate>Thu, 19 Aug 2021 17:31:49 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu10/</guid>
      <description>题号 题目 完成情况    7077 Pty loves sequence   7078 Pty with card   7079 Pty loves lines 通过  7080 Pty hates prime numbers 通过  7081 Pty loves book   7082 Pty loves lcm   7083 Pty loves graph   7084 Pty loves string 通过  7085 Pty loves SegmentTree   7086 Pty plays game     Pty loves sequence Pty with card Pty loves lines #include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>2021牛客多校10</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder10/</link>
      <pubDate>Wed, 18 Aug 2021 22:13:07 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder10/</guid>
      <description>题号 标题 团队的状态    A Browser Games 通过  B Child’s play 未通过  C Dance Party 未通过  D Diameter Counting 未通过  E More Fantastic Chess Problem 未通过  F Train Wreck 通过  G Game of Death 通过  H War of Inazuma (Easy Version) 通过  I War of Inazuma (Hard Version) 未通过  J Illuminations 通过  K Walking 通过    Browser Games Child’s play Dance Party Diameter Counting More Fantastic Chess Problem Train Wreck Game of Death  \(n\) 个人，每个人等概率的选择其余的人开枪，有 \(p\) 的概率击中，所有人同时开枪，分别求存活人数为 \(0, 1, \dots, n\) 的概率。</description>
    </item>
    
    <item>
      <title>2021杭电多校9</title>
      <link>https://blog.asukakyle.top/post/2021hdu9/</link>
      <pubDate>Tue, 17 Aug 2021 17:31:45 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu9/</guid>
      <description>题号 题目 完成情况    7066 NJU emulator 通过  7067 Just another board game 通过  7068 Dota2 Pro Circuit 通过  7069 Into the woods   7070 Did I miss the lethal?   7071 Guess the weight 通过  7072 Boring data structure problem 通过  7073 Integers Have Friends 2.0 通过  7074 Little prince and the garden of roses   7075 Unfair contest 通过  7076 ZYB’s kingdom 通过    NJU emulator // Author: HolyK // Created: Tue Aug 17 16:06:20 2021 #include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>「万能」Euclidean 算法小记</title>
      <link>https://blog.asukakyle.top/post/%E4%B8%87%E8%83%BD-euclidean-%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sun, 15 Aug 2021 21:24:32 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E4%B8%87%E8%83%BD-euclidean-%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</guid>
      <description>「万能」Euclidean 算法 \[ F(P, R, Q, N, X, Y) = \prod_{i = 0}^N Y^{f(i) - f(i-1)}X \]
其中 \(f(i) = \lfloor \dfrac{Pi+R}{Q}\rfloor, f(-1) = 0\)​。\(X, Y\) 为操作序列，有乘法结合律，类比矩阵。
若 \(R \geq Q\)​，则 \(f(i)= \lfloor \dfrac{Pi+(R \bmod Q)}{Q}\rfloor + \lfloor\dfrac{R}{Q}\rfloor\)​，所以 \[ F(P, R, Q, N, X, Y) = Y^{\lfloor\dfrac{R}{Q}\rfloor}F(P, R \bmod Q, Q, N, X, Y) \]
若 \(P \geq Q\)​，则 \(f(i)= \lfloor \dfrac{(P \bmod Q)i+R}{Q}\rfloor + \lfloor\dfrac{P}{Q}\rfloor i\)​，记 \(f&amp;#39;(i)= \lfloor \dfrac{(P \bmod Q)i+R}{Q}\rfloor\)​ \[ \begin{aligned} F(P, R, Q, N, X, Y) &amp;amp;= X\prod_{i = 1}^N Y^{f&amp;#39;(i) - f&amp;#39;(i-1)}Y^{\lfloor\dfrac{P}{Q}\rfloor}X\\ &amp;amp;= X\prod_{i = 0}^{N - 1} Y^{f&amp;#39;(i+1) - f&amp;#39;(i)}Y^{\lfloor\dfrac{P}{Q}\rfloor}X\\ &amp;amp;= XF(P \bmod Q, (P \bmod Q) + R, Q, N - 1, Y^{\lfloor\dfrac{P}{Q}\rfloor}X, Y) \end{aligned} \] 若 \(P &amp;lt; Q\)，考虑交换 \(X, Y\)。</description>
    </item>
    
    <item>
      <title>2021牛客多校9</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder9/</link>
      <pubDate>Sat, 14 Aug 2021 18:36:09 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder9/</guid>
      <description>题号 标题 团队的状态    A A Math Challenge 通过  B Best Subgraph 未通过  C Cells 通过  D Divide-and-conquer on Tree 未通过  E Eyjafjalla 通过  F Financial Order Execution 未通过  G Glass Balls 通过  H Happy Number 通过  I Incentive Model 通过  J Jam 未通过    A Math Challenge LOJ138 + 自然数幂和。
// Author: HolyK // Created: Sun Aug 15 21:59:21 2021 #include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>2021杭电多校8</title>
      <link>https://blog.asukakyle.top/post/2021hdu8/</link>
      <pubDate>Thu, 12 Aug 2021 19:45:56 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu8/</guid>
      <description>题号 题目 完成情况    7056 X-liked Counting 通过  7057 Buying Snacks 通过  7058 Ink on paper 通过  7059 Counting Stars 通过  7060 Separated Number 通过  7061 GCD Game 通过  7062 A Simple Problem 通过  7063 Square Card 通过  7064 Singing Superstar 通过  7065 Yinyang     X-liked Counting 直接记忆化搜索常数比较大，一部分用for循环代替。
// Author: HolyK // Created: Fri Aug 13 16:54:31 2021 #include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>Fast Walsh–Hadamard Transform</title>
      <link>https://blog.asukakyle.top/post/fwt/</link>
      <pubDate>Sun, 08 Aug 2021 12:55:13 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/fwt/</guid>
      <description>卷积 运算 \(\odot\)，序列 \(a, b, c\)，方阵 \(P, Q, R\) 满足 \(R\) 可逆，且 \[ \begin{cases} c_n &amp;amp;= \sum_{p \odot q = n}a_pb_q\\ \sum_j R_{i, j}c_j &amp;amp;= \sum_pP_{i,p}a_p\sum_q Q_{i, q}b_q \end{cases} \] 所以 \[ \begin{aligned} \sum_{j}R_{i, j}\sum_{p, q}[p\odot q = j]a_pb_q &amp;amp;= \sum_{p, q}P_{i, p}Q_{i, q}a_pb_q\\ \sum_{p, q}R_{i, p \odot q}a_pb_q &amp;amp;= \sum_{p, q}P_{i, p}Q_{i, q}a_pb_q\\ R_{i, p\odot q} &amp;amp;= P_{i, p}Q_{i, q} \end{aligned} \]
对序列 \(a\) 施加线性变换 \(P\)，序列 \(b\) 施加线性变换 \(Q\)，点乘之后再施加逆变换 \(R^{-1}\)，就可以实现 \(\odot\) 卷积。</description>
    </item>
    
    <item>
      <title>2021牛客多校7</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder7/</link>
      <pubDate>Sat, 07 Aug 2021 19:38:21 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder7/</guid>
      <description>题号 标题 团队的状态    A xay loves connected graphs 通过  B xay loves monotonicity 通过  C xay loves jumping 未通过  D xay loves matrices 通过  E xay loves nim 通过  F xay loves trees 通过  G xay loves KDT 未通过  H xay loves count 通过  I xay loves or 通过  J xay loves Floyd 通过  K xay loves sequence 通过    xay loves connected graphs // Author: HolyK // Created: Sun Aug 8 18:17:17 2021 #include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>Min_25筛小记</title>
      <link>https://blog.asukakyle.top/post/min_25/</link>
      <pubDate>Sat, 07 Aug 2021 10:38:55 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/min_25/</guid>
      <description>min_25 筛 约定
 \(\mathbf{P}\) 表示全体质数集合 \(p_i\) 表示第 \(i\) 个质数，特别地，\(p_0 =1\)。 \(\mathrm{lpf}_i\) 表示 \(i\)​ 的最小质因子。   计算数论函数 \(f(n)\)​​​​ 的前缀和，要求 \(f(p_i)\)​​​​ 是低阶多项式，且对于合数 \(n\)​​​​，\(f(n)\)​ 可以写成形如 \(f(n) = A(\mathrm{lpf}_n^e)B\left(\dfrac{n}{\mathrm{lpf_n^e}}\right)\)​​​​的式子，其中 \(A(p^e)\)​​​​ 可以快速求值或预处理。
当 \(f(n)\)​ 是积性函数时，\(A(p^e) = f(p^e), B(n) = f(n)\)​。
 Part. 1 令 \[ g_k(n, i) = \sum_{j=1}^nj^k[j \in \mathbf{P} \ \mathrm{or}\ \mathrm{lpf}_j &amp;gt; p_i] \] 直观地，\(g_k(n, i)\) 表示埃式筛第 \(i\) 轮后剩余 \(n\) 以内的数的 \(k\) 次方之和。 \[ g_k(n, i) = \begin{cases} g_k(n, i - 1), &amp;amp; p_i^2 &amp;gt; n\\ g_k(n, i - 1) - p_i^k\left(g_k\left(\lfloor \dfrac{n}{p_i}\rfloor, i-1\right) - \sum_{j=1}^{i-1}p_j^k\right), &amp;amp; p_i^2 \leq n \end{cases} \] 直观地，考虑埃式筛第 \(i\) 轮：</description>
    </item>
    
    <item>
      <title>2021牛客多校6</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder6/</link>
      <pubDate>Sat, 07 Aug 2021 09:53:25 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder6/</guid>
      <description>题号 标题 团队的状态    A Contracting Convex Hull 未通过  B Defend Ponyville 通过  C Delete Edges 通过  D Gambling Monster 通过  E Growing Tree 通过  F Hamburger Steak 通过  G Hasse Diagram 通过  H Hopping Rabbit 通过  I Intervals on the Ring 通过  J Defend Your Country 通过  K Starch Cat 通过    Contracting Convex Hull Defend Ponyville // Author: HolyK // Created: Fri Aug 13 20:54:58 2021 #include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>2021杭电多校6</title>
      <link>https://blog.asukakyle.top/post/2021hdu6/</link>
      <pubDate>Thu, 05 Aug 2021 20:42:30 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu6/</guid>
      <description>题号 题目 完成情况    7025 Yes, Prime Minister 通过  7026 Might and Magic   7027 0 tree 通过  7028 Decomposition   7029 Median 通过  7030 The Struggle   7031 Power Station of Art   7032 Command and Conquer: Red Alert 2   7033 Typing Contest   7034 Array   7035 Game     Yes, Prime Minister Might and Magic 凸函数的和仍是凸函数。</description>
    </item>
    
    <item>
      <title>2021杭电多校5</title>
      <link>https://blog.asukakyle.top/post/2021hdu5/</link>
      <pubDate>Wed, 04 Aug 2021 12:03:49 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu5/</guid>
      <description>题号 题目 完成情况    7012 Miserable Faith 通过  7013 String Mod 通过  7014 VC Is All You Need 通过  7015 Another String   7016 Random Walk 2 通过  7017 Cute Tree 通过  7018 Banzhuan 通过  7019 Supermarket   7020 Array 通过  7021 Guess Or Not 2   7022 Jsljgame   7023 Yet Another Matrix Problem   7024 Penguin Love Tour 通过    Miserable Faith LCT 裸题。</description>
    </item>
    
    <item>
      <title>2021牛客多校3</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder3/</link>
      <pubDate>Sat, 31 Jul 2021 11:28:53 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder3/</guid>
      <description>题号 标题 团队的状态    A Guess and lies 通过  B Black and white 通过  C Minimum grid 通过  D Count 通过  E Math 通过  F 24dian 通过  G Yu Ling(Ling YueZheng) and Colorful Tree 通过  H Ling Qiu, Luna and Triple Backpack 未通过  I Kuriyama Mirai and Exclusive Or 通过  J Counting Triangles 通过    Guess and lies Black and white Minimum grid Count Math 24dian Yu Ling(Ling YueZheng) and Colorful Tree  一棵 \(n\) 个点的树，1 是根。\(q\) 次操作：</description>
    </item>
    
    <item>
      <title>[NOI2021] 密码箱</title>
      <link>https://blog.asukakyle.top/post/noi2021-%E5%AF%86%E7%A0%81%E7%AE%B1/</link>
      <pubDate>Fri, 30 Jul 2021 20:54:17 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/noi2021-%E5%AF%86%E7%A0%81%E7%AE%B1/</guid>
      <description>题面 题解 设向量 \(\begin{pmatrix}x \\ y\end{pmatrix}\) 表示分数 \(\dfrac x y\)。
那么整数加分数的运算 \(a+\dfrac x y = \dfrac{x + ay}{y}\) 可以表示为 \[ \begin{pmatrix} 1 &amp;amp; a\\ 0 &amp;amp; 1 \end{pmatrix} \begin{pmatrix} x\\y \end{pmatrix} = \begin{pmatrix} x+ay\\ y \end{pmatrix} \] 设 \(a_k = \dfrac{x}{y}\)，则 \(a_{k-1}&amp;#39;=a_{k-1}+\dfrac y x\)，写成矩阵形式为
\[ \begin{pmatrix} a_{k-1} &amp;amp; 1\\ 1 &amp;amp; 0 \end{pmatrix} \begin{pmatrix} x\\y \end{pmatrix} = \begin{pmatrix} a_{k-1}x+y\\ x \end{pmatrix} \] 记 \[ F = \begin{pmatrix} a_{0} &amp;amp; 1\\ 1 &amp;amp; 0 \end{pmatrix} \begin{pmatrix} a_{1} &amp;amp; 1\\ 1 &amp;amp; 0 \end{pmatrix} \dots \begin{pmatrix} a_{k} &amp;amp; 1\\ 1 &amp;amp; 0 \end{pmatrix} \] 则 \[ f(a_0, a_1, \dots, a_n) = F_{0, 0} \] 考虑维护矩阵 \(F\)。</description>
    </item>
    
    <item>
      <title>LGV 引理小记</title>
      <link>https://blog.asukakyle.top/post/lgv-lemma/</link>
      <pubDate>Fri, 30 Jul 2021 16:40:08 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/lgv-lemma/</guid>
      <description>LGV 引理 设 \(G(V, E)\) 是一个 DAG，起点集 \(A = \{a_1, \dots, a_n\} \subseteq V\)，终点集 \(B = \{b_1, \dots, b_n\} \subseteq V\) 。
记 \(\omega_e\) 表示有向边 \(e\) 的边权，\(\omega_e\) 属于某个交换环。
对于有向路径 \(P\)，定义 \(\omega(P)\) 表示路径上边权的乘积，即 \[ \omega(P) = \prod\limits_{e \in P} \omega_e \] 对于任意两点 \(a, b\)，记 \(e(a, b)\) 表示从 \(a\) 到 \(b\) 的所有路径的权值之和，即 \[ e(a, b) = \sum\limits_{P:a\to b}\omega(P) \] 特别地，若 \(\omega_e=1\) ，\(e(a, b)\) 表示 从 \(a\) 到 \(b\) 的路径数。
记矩阵 \[ M = \begin{pmatrix} e(a_1, b_1) &amp;amp; e(a_1, b_2) &amp;amp; \cdots &amp;amp; e(a_1, b_n)\\ e(a_2, b_1) &amp;amp; e(a_2, b_2) &amp;amp; \cdots &amp;amp; e(a_2, b_n)\\ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots\\ e(a_n, b_1) &amp;amp; e(a_n, b_2) &amp;amp; \cdots &amp;amp; e(a_n, b_n)\\ \end{pmatrix} \] 定义从 \(A\) 到 \(B\) 的 \(n\) 元不相交路径组表示 \(G\) 中的 \(n\) 条有向路径 \((P_1, \dots, P_n)\) 满足：</description>
    </item>
    
    <item>
      <title>2021杭电多校4</title>
      <link>https://blog.asukakyle.top/post/2021hdu4/</link>
      <pubDate>Thu, 29 Jul 2021 18:01:33 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu4/</guid>
      <description>总览   题号 题目 完成情况    6985 Calculus 通过  6986 Kanade Loves Maze Designing 通过  6987 Cycle Binary   6988 Display Substring 通过  6989 Didn’t I Say to Make My Abilities Average in the Next Life?! 通过  6990 Directed Minimum Spanning Tree   6991 Increasing Subsequence 通过  6992 Lawn of the Dead 通过  6993 License Plate Recognition 通过  6994 Pony Running   6995 Travel on Tree 通过    Calculus 签到题，常数不是 0 的都不收敛。</description>
    </item>
    
    <item>
      <title>2021杭电多校3</title>
      <link>https://blog.asukakyle.top/post/2021hdu3/</link>
      <pubDate>Tue, 27 Jul 2021 20:39:53 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu3/</guid>
      <description>题号 题目 完成情况    6973 Bookshop 通过  6974 Destinations 通过  6975 Forgiving Matching 通过  6976 Game on Plane 通过  6977 Kart Race 通过  6978 New Equipments II   6979 Photoshop Layers 通过  6980 Restore Atlantis II   6981 Rise in Price 通过  6982 Road Discount 通过  6983 Segment Tree with Pruning 通过  6984 Tree Planting     Bookshop  给定一棵树，每个点有个权值 \(w_i\)，\(m\) 次询问，给出 \(x, y, z\)，表示从 \(x\) 走到 \(y\)，每经过一个点 \(i\)，如果 \(z \geq w_i\) 则 \(z -= w_i\)，最终 \(z\) 是多少。</description>
    </item>
    
    <item>
      <title>2021杭电多校2</title>
      <link>https://blog.asukakyle.top/post/2021hdu2/</link>
      <pubDate>Thu, 22 Jul 2021 18:50:15 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu2/</guid>
      <description>总览   题号 题目 完成情况    6961 I love cube 通过  6962 I love tree 通过  6963 I love playing games   6964 I love counting 通过  6965 I love string 通过  6966 I love sequences   6967 I love data structure 通过  6968 I love exam 通过  6969 I love triples 通过  6970 I love permutation   6971 I love max and multiply 通过    I love cube 队友切了</description>
    </item>
    
    <item>
      <title>2021牛客多校2</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder2/</link>
      <pubDate>Wed, 21 Jul 2021 13:31:31 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder2/</guid>
      <description>总览   题号 标题 团队的状态    A Arithmetic Progression 通过  B Cannon 通过  C Draw Grids 通过  D Er Ba Game 通过  E Gas Station 通过  F Girlfriend 通过  G League of Legends 通过  H Olefin 未通过  I Penguins 通过  J Product of GCDs 通过  K Stack 通过  L WeChat Walk 通过    Arithmetic Progression  给定每个元素互不相同的序列 \(a_n\)，求排序后能构成等差数列的区间个数。</description>
    </item>
    
    <item>
      <title>2021牛客多校1</title>
      <link>https://blog.asukakyle.top/post/2021nowcoder1/</link>
      <pubDate>Tue, 20 Jul 2021 18:31:28 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021nowcoder1/</guid>
      <description>  题号 标题 团队的状态    A Alice and Bob 通过  B Ball Dropping 通过  C Cut the Tree 通过  D Determine the Photo Position 通过  E Escape along Water Pipe 通过  F Find 3-friendly Integers 通过  G Game of Swapping Numbers 通过  H Hash Function 通过  I Increasing Subsequence 通过  J Journey among Railway Stations 通过  K Knowledge Test about Match 通过    Alice and Bob Ball Dropping Cut the Tree Determine the Photo Position Escape along Water Pipe Find 3-friendly Integers Game of Swapping Numbers Hash Function Increasing Subsequence Journey among Railway Stations Knowledge Test about Match </description>
    </item>
    
    <item>
      <title>2021杭电多校1</title>
      <link>https://blog.asukakyle.top/post/2021hdu1/</link>
      <pubDate>Tue, 20 Jul 2021 18:20:13 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/2021hdu1/</guid>
      <description>Mod, Or and Everything 队友切了。
Rocket land Puzzle loop 设每个边有没有为 0/1，列方程组解异或方程，求自由元个数。
// Author: HolyK // Created: Tue Jul 20 17:38:11 2021 #include &amp;lt;bits/stdc++.h&amp;gt; #define dbg(a...)fprintf(stderr,a) template &amp;lt;class T, class U&amp;gt; inline bool smin(T &amp;amp;x, const U &amp;amp;y) {  return y &amp;lt; x ? x = y, 1 : 0; } template &amp;lt;class T, class U&amp;gt; inline bool smax(T &amp;amp;x, const U &amp;amp;y) {  return x &amp;lt; y ? x = y, 1 : 0; }  using LL = long long; using PII = std::pair&amp;lt;int, int&amp;gt;; constexpr int P(998244353); inline void inc(int &amp;amp;x, int y) {  x += y;  if (x &amp;gt;= P) x -= P; } int fpow(int x, int k = P - 2) {  int r = 1;  for (; k; k &amp;gt;&amp;gt;= 1, x = 1LL * x * x % P) {  if (k &amp;amp; 1) r = 1LL * r * x % P;  }  return r; } constexpr int N(17 * 16 * 2 + 5); using BTS = std::bitset&amp;lt;N&amp;gt;; BTS p[N], tmp; bool ins(BTS &amp;amp;x) {  for (int i = N - 1; i &amp;gt;= 0; i--) {  if (!</description>
    </item>
    
    <item>
      <title>回文树小记</title>
      <link>https://blog.asukakyle.top/post/pam/</link>
      <pubDate>Wed, 14 Jul 2021 17:02:30 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/pam/</guid>
      <description>基本元素 节点：原串的一个本质不同的回文子串。
长度 len[o]：回文子串长度。
转移边 ch[o][x]：两边同时加字符 \(x\)。
失配边 fa[o]：最长回文后缀。到根的路径是所有回文后缀。
有两个根，奇根1 和 偶根0，fa[0] = 1, len[1] = -1。
常用的构造方法是均摊 \(O(n)\) 的，证明很简单，略。
代码：
char s[N], *now = s; std::array&amp;lt;int, 26&amp;gt; ch[N]; int fa[N], len[N], cnt, dep[N]; int jmp(int x) {  for (; now[~len[x]] != *now; x = fa[x]) ;  return x;  } int ins(int x) {  static int p, q;  now++;  if (!ch[p = jmp(p)][x]) {  len[q = ++cnt] = len[p] + 2;  fa[q] = ch[jmp(fa[p])][x];  ch[p][x] = q;  dep[q] = dep[fa[q]] + 1;  }  return p = ch[p][x]; } int main() {  std::ios::sync_with_stdio(false);  std::cin.</description>
    </item>
    
    <item>
      <title>莫队小记</title>
      <link>https://blog.asukakyle.top/post/%E8%8E%AB%E9%98%9F/</link>
      <pubDate>Mon, 12 Jul 2021 15:21:22 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E8%8E%AB%E9%98%9F/</guid>
      <description>莫队二次离线 从 \([x, y]\) 移动到 \([l, r]\)。
 \(x \to l\)
查询 \(a_i\) 在区间 \([i+1, y]\) 的贡献，拆成两个前缀 \(i, y\)，预处理 \(a_{i-1}\) 对前缀 \(i-1\) 的贡献，设贡献的前缀和为 \(pre_1[i]\)。
\(x&amp;lt;l\)
删除 \(a_{x} \dots a_{l-1}\)。
减前缀 \(y\) 的贡献、加前缀 \(i\) 的贡献。
离线 \(\{y, x, l-1,-1\}, \Delta ans= pre_1[l] - pre_1[x]\)。
 \(x&amp;gt;l\)
加入 \(a_l\dots a_{x-1}\)。
加前缀 \(y\) 的贡献、减前缀 \(i\) 的贡献。
离线 \(\{y, l, x-1,+1\}, \Delta ans= pre_1[l] - pre_1[x]\)。
  \(y\to r\)
查询 \(a_i\) 在区间 \([x, i-1]\) 的贡献，拆成两个前缀 \(x-1, i-1\)，预处理 \(a_{i}\) 对前缀 \(i-1\) 的贡献，设贡献的前缀和为 \(pre_2[i]\)。</description>
    </item>
    
    <item>
      <title>[UOJ91]最大异或和</title>
      <link>https://blog.asukakyle.top/post/uoj91%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</link>
      <pubDate>Mon, 12 Jul 2021 08:17:49 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/uoj91%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</guid>
      <description>有一个数列 \(a_1,a_2,\dots,a_n\)，每个 \(a_i\) 都是小于 \(2^m\) 的非负整数。
现在需要实现三种操作，格式说明如下：
 1 x y w：对于所有 \(x≤i≤y\)，将 \(a_i\) 修改为 \(a_i\oplus w\)。其中 \(w\) 是一个小于 \(2^m\) 的非负整数。 2 x y w：对于所有 \(x≤i≤y\)，将 \(a_i\) 修改为 \(w\)。其中 \(w\) 是一个小于 \(2^m\) 的非负整数。 3：从 \(a_1,a_2,⋯,a_n\) 中选出若干个数，使得选出的数异或和最大。请输出这个最大值。  这里 \(\oplus\) 表示按位异或运算，\(x_1,x_2,⋯,x_l\) 的异或和是指 \(x_1\oplus x_2\oplus \cdots\oplus x_l\)。
\(n,m,q≤2000\)。
 将原序列差分，线性基不变。
然后每次操作就是单点插入和删除，下面给出两种可删除线性基的写法。
离线 记录存活时间，贪心。
using BS = std::bitset&amp;lt;2000&amp;gt;; using PBI = std::pair&amp;lt;BS, int&amp;gt;; PBI base[2000]; void ins(PBI x) {  for (int i = 1999; i &amp;gt;= 0; i--) {  if (!</description>
    </item>
    
    <item>
      <title>[ICPC2014 WF]Pachinko</title>
      <link>https://blog.asukakyle.top/post/icpc2014-wfpachinko/</link>
      <pubDate>Mon, 12 Jul 2021 08:12:01 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/icpc2014-wfpachinko/</guid>
      <description>有一个 \(h×w\) 的方格表，有些格子是墙，有些格子是终点，剩下的格子是空地。
你现在要在这里进行随机游走，其中，每一轮向上、下、左、右的概率分别为 \(u\%,d\%,l\%,r\%\)，如果移动后超过方格表或到达墙，则这次移动失效，保持原地不动。
当你到达终点时，游戏就结束了。现在，在方格表第一行的所有空地中均匀随机一个作为起点，求你就进入每个终点的概率。
\(1≤w≤20, 2≤h≤10000\)。
 设其中一个终点为 \(t\)，\(f_{i, j}\) 表示 \((i, j)\) 走到 \(t\) 的概率。 \[ f_{i, j} = uf_{i-1, j}+df_{i+1, j}+lf_{i, j-1}+rf_{i, j+1} \]
\[ f_{i, j} - uf_{i-1, j} - df_{i+1, j} - lf_{i, j-1} - rf_{i, j+1}=0 \]
\[ f_t=1 \]
\[ P\cdot\mathbf{f}=\mathbf{e} \]
\(P\) 是 \(wh \times wh\) 的方阵，\(\mathbf{f},\mathbf{e}\) 是列向量。其中 \(e_i=[i=t]\)。 \[ \mathbf{f}=P^{-1}\mathbf{f} \] 设 \(1\dots s\) 为起点 ，答案为 \[ ans = \frac1s \sum_{i=1}^sf_i \] 写成矩阵的形式，设行向量 \(\mathbf{v}^T=\begin{pmatrix} 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; \cdots &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots \end{pmatrix}\)，前面有 \(s\) 个1，其他都是0。 \[ \begin{aligned} ans &amp;amp;= \frac1s \mathbf{v}^T\mathbf{f}\\ &amp;amp;= \frac1s\mathbf{v}^TP^{-1}\mathbf{e}\\ \end{aligned} \] 相当于求行向量 \(\alpha^T = \dfrac1s\mathbf{v}^TP^{-1}\) 第 \(t\) 维的值，所以只要求出这个行向量即可。 \[ \alpha^T P = \frac1s\mathbf{v} \]</description>
    </item>
    
    <item>
      <title>[Codeforces938G]Shortest Path Queries</title>
      <link>https://blog.asukakyle.top/post/cf938g/</link>
      <pubDate>Thu, 15 Apr 2021 17:26:44 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/cf938g/</guid>
      <description>给定一个带权无向图，实现三种操作：加边，删边，询问两点间的异或最短路。
\(n, m, q \leq 2\times 10^5\)。
 类似最大 xor 和路径，用线性基可以求解异或最短路。
因为线性基删除很麻烦，所以直接离线用线段树分治。
图可能不连通，需要用并查集维护连通性，然后记录每个点到当前根的异或和 \(d_x\)。
加边时设 \(val = d_x\oplus d_y \oplus w\)，如果 \(x, y\) 已经联通则将 \(val\) 加入当前联通块的线性基，如果不在一个并查集，连接两个根，边权为 \(val\)。
#include &amp;lt;bits/stdc++.h&amp;gt; #define perr(a...)fprintf(stderr,a) #define dbg(a...)perr(&amp;quot;\033[32;1m&amp;quot;),perr(a),perr(&amp;quot;\033[0m&amp;quot;) template &amp;lt;class T, class U&amp;gt; inline bool smin(T &amp;amp;x, const U &amp;amp;y) {  return y &amp;lt; x ? x = y, 1 : 0; } template &amp;lt;class T, class U&amp;gt; inline bool smax(T &amp;amp;x, const U &amp;amp;y) {  return x &amp;lt; y ?</description>
    </item>
    
    <item>
      <title>Gym102994</title>
      <link>https://blog.asukakyle.top/post/gym102994/</link>
      <pubDate>Thu, 15 Apr 2021 09:03:20 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/gym102994/</guid>
      <description>总览   题号 A B C D E F G H I J K L M    完成情况 1 1 0 1 1 1 1 0 0 1 1 1 0    A. Everyone Loves Playing Games  A 有 \(N\) 对数， B 有 \(M\) 对数，A 从 \(N\) 对数中分别选一个数得到异或和 \(X\)，然后 B 从 \(N\) 对数得到一个异或和 \(Y\)，\(A\) 希望 \(X \oplus Y\) 最大，\(B\) 希望 \(X \oplus Y\) 最小，求最后的结果。</description>
    </item>
    
    <item>
      <title>Gym102441</title>
      <link>https://blog.asukakyle.top/post/gym102441/</link>
      <pubDate>Thu, 08 Apr 2021 22:39:55 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/gym102441/</guid>
      <description>总览   题号 A B C D E F G H I J K    完成情况 1 0 1 1 1 1 1 1 1 1 0    A. Template for Search  给定由小写字母、字符* 和 ? 组成的字符串 \(s\)，其中 * 可以被替换成任意串（包括空串），? 可以被替换成任意字符，求 \(s\) 可以表示成的最短回文串。
\(1 \leq |s| \leq 500\)。
 设 \(dp[l][r]\) 表示 \(l \dots r\) 能组成的最短回文串，有三种转移：
 \(s_l\) 匹配 \(s_r\) \(s_l = *\) 匹配右边一段 \(s_r = *\) 匹配左边一段  B.</description>
    </item>
    
    <item>
      <title>[Codeforces955D]Scissors</title>
      <link>https://blog.asukakyle.top/post/codeforces955dscissors/</link>
      <pubDate>Fri, 26 Mar 2021 17:56:38 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces955dscissors/</guid>
      <description>给定两个串 \(s,t\) 整数 \(k\) ,你可以在 \(s\) 中取出任意的两个不相交的长度为 \(k\) 串，将它们按顺序拼在一起形成一个新串。
求一种取串的方案使得 \(t\) 是新串的子串。
\(|s|,|t| \leq 5 \times 10^5\)。
 kmp 算出正串和反串的能匹配 \(t\) 的前/后缀最大长度。
设 \(s\) 串的前缀 \([pre_1 \dots pre_i]\) 能匹配 \(t\) 的前缀集合为 \(P\)，后缀 \([suf_{i+1},suf_n]\) 能匹配 \(t\) 的后缀集合为 \(Q\)，只要判断是否存在 \(x\in P,y\in Q,x, y\leq k,x+y=|s|\) 即可。
类似 AC 自动机那样建出 fail 树，那么一个点能匹配的前缀长度集合就是在 fail 树上到根的路径，在正串 fail 树上维护集合 \(P\)，每次添加一个数 \(x\) 时，标记 \(k-x\) 对应在反串 fail 树上的点，每次查询反串 fail 树上一个点的祖先是否被标记。
具体实现时，标记一个点可以用子树加一，查询的时候单点查询即可。
复杂度 \(O(n \log n)\)。
#include &amp;lt;bits/stdc++.h&amp;gt; #define dbg(.</description>
    </item>
    
    <item>
      <title>数论知识总结</title>
      <link>https://blog.asukakyle.top/post/%E6%95%B0%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 19 Mar 2021 10:28:29 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E6%95%B0%E8%AE%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>1 欧几里得算法  欧几里得算法可以求两个数的最大公约数 \(\gcd(a, b)\)。
 不妨设 \(a \geq b, a = kb + r(k \geq 1, 0 \leq r &amp;lt; b)\)。
一方面，设 \(d_1\) 为 \(a, b\) 的一个公约数，则 \[ \begin{aligned} a &amp;amp;= k_ad_1\\ b &amp;amp;= k_bd_1\\ r &amp;amp;= a - kb\\ &amp;amp;= (k_a - kk_b)d_1 \end{aligned} \] 即 \(d_1\) 也是 \(r\) 的约数，\(b, r\) 的公约数。
另一方面，设 \(d_2\) 为 \(b, r\) 的一个公约数，则 \[ \begin{aligned} b &amp;amp;= k&amp;#39;_bd_2\\ r &amp;amp;= k_r&amp;#39;d_2\\ a &amp;amp;= kb + r\\ &amp;amp;= (kk&amp;#39;_b + k_r&amp;#39;)d_2 \end{aligned} \] 即 \(d_2\) 也是 \(a\) 的约数，\(a, b\) 的公约数。</description>
    </item>
    
    <item>
      <title>[Codeforces1413F]Roads and Ramen</title>
      <link>https://blog.asukakyle.top/post/codeforces1413froads-and-ramen/</link>
      <pubDate>Fri, 19 Mar 2021 10:09:39 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces1413froads-and-ramen/</guid>
      <description>给定一棵 \(n\) 个点的无根树，每条边都有标记0或1。现在有 \(m\) 次操作，每次操作将第 \(id\) 条边的标记异或1。在每次操作后输出当前树上最长的有偶数个1的路径长度。
\(n,m \leq 5 \times 10^5\)。
 动态DP 设 \(dp[x][0/1]\) 表示 \(x\) 向下有偶数/奇数个1的最长路径，\(dp[x][2]\) 表示 \(x\) 子树内偶数个1的直径。
容易写出转移（\(val_y\) 表示 \(y\) 的父边的权值）： \[ \begin{aligned} dp&amp;#39;[x][0] &amp;amp;= \max\{dp[x][0], dp[y][val_y] + 1\}\\ dp&amp;#39;[x][1] &amp;amp;= \max\{dp[x][1], dp[y][val_y \oplus 1] + 1\}\\ dp&amp;#39;[x][2] &amp;amp;= \max\{dp[x][0] + dp[y][val_y] + 1, dp[x][1] + dp[y][val_y \oplus 1] + 1, dp[x][2],dp[y][2]\} \end{aligned} \] 改写成 \(x\) 从重儿子 \(y\) 转移的矩阵（这里以 \(val_y = 0\) 为例）： \[ \begin{bmatrix} dp&amp;#39;[x][0]\\ dp&amp;#39;[x][1]\\ dp&amp;#39;[x][2]\\ 0 \end{bmatrix} = \begin{bmatrix} 1 &amp;amp; -\infty &amp;amp; -\infty &amp;amp; dp[x][0]\\ -\infty &amp;amp; 1 &amp;amp; -\infty &amp;amp; dp[x][1]\\ dp[x][0] + 1 &amp;amp; dp[x][1] + 1 &amp;amp; 0 &amp;amp; dp[x][2]\\ -\infty &amp;amp; -\infty &amp;amp; -\infty &amp;amp; 0 \end{bmatrix} \begin{bmatrix} dp[y][0]\\ dp[y][1]\\ dp[y][2]\\ 0 \end{bmatrix} \] 上面的 \(dp[x]\) 是指排除掉 \(x\) 重儿子的答案，\(dp&amp;#39;[x]\) 是指完整的 \(x\) 的答案。</description>
    </item>
    
    <item>
      <title>[Codechef CCC]Hit the Coconuts</title>
      <link>https://blog.asukakyle.top/post/codechef-ccchit-the-coconuts/</link>
      <pubDate>Thu, 18 Mar 2021 21:51:42 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codechef-ccchit-the-coconuts/</guid>
      <description>题意： \(N\) 个椰子, 第 \(i\) 个需要敲 \(a_i\) 下才能打开，问最坏情况下最少要敲多少下才能打开 \(k\) 个椰子。
 不妨设 \(a_i \le a_{i + 1}\)。
要敲开一个椰子，现在有两种方法：
随便拿起一个椰子不停地敲，最多要 \(a_n\) 次。 有目的性地想要敲开某个椰子 \(a_i\)，可以发现最优的策略就是每个椰子都敲 \(a_i\) 次，最多要敲 \(a_i\times(n - i + 1)\) 次，所有情况下取最小值。  第二种情况实际上包含了第一种。
那么要敲开 \(k\) 个椰子，也有两种方法：
每次都随便拿一个敲开，最多要 \(a_n + a_{n - 1}+ \dots + a_{n - k + 1}\) 次。 选 \(k\) 个椰子 \(a_{b_1}, a_{b_2}, \dots, a_{b_k}(b_i &amp;lt; b_{i + 1})\)，有目的性地敲开它们。发现最优策略下最多要敲 \(\sum_{i = 1}^k (a_{b_i} - a_{b_i - 1}) \times (n - b_i + 1)\) 次，其中 \(a_{b_0} = 0\)，所有情况下取最小值。  第二种情况也包含了第一种。</description>
    </item>
    
    <item>
      <title>[PKUWC2018]猎人杀</title>
      <link>https://blog.asukakyle.top/post/pkuwc2018%E7%8C%8E%E4%BA%BA%E6%9D%80/</link>
      <pubDate>Thu, 18 Mar 2021 21:47:16 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/pkuwc2018%E7%8C%8E%E4%BA%BA%E6%9D%80/</guid>
      <description>\(n\) 个人，每个人有个权值 \(a_i\)。进行 \(n\) 轮操作，每轮开枪杀死一个人，\(i\) 被杀死的概率 \(p_i=\dfrac{a_i}{\sum_{x\ is\ alive}a_x}\) ，求最后死的那个人是 \(1\) 的概率。答案对 \(998244353\) 取模。
\(a_i &amp;gt; 0, 1 \le \sum a_i \le 10^5\)。
 设 \(s = \sum_{i=1}^na_i,w=\sum_{x\ is\ alive}a_x\)，那么有 \[ \begin{aligned} p_i &amp;amp;= \frac{a_i}{w}\\ \frac wsp_i &amp;amp;= \frac {a_i}{s}\\ p_i &amp;amp;= \frac {a_i}{s} + \frac{s - w}s p_i \end{aligned} \] 最后的这个式子可以理解为，每次开枪的目标是所有活人和死人，如果打到活人就会杀死他，如果打到死人不算，重打。
这样变成进行无限轮，每轮的目标都是所有人，打到某个人的概率更容易表示。
然后考虑容斥，设 \(A = \{ a_2, a_3, \dots, a_n \}\)， \(1\) 在第 \(r\) 轮被打死，且至少有 \(k\) 个人在 \(1\) 之后被打死。 \[ \begin{aligned} ans &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \sum_{r = 1}^{\infty} \left(\frac{s - a_1 - \sum_{i \in S} a_i}{s}\right)^{r - 1} \cdot \frac{a_1}{s}\\ &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \frac{a_1}{s} \cdot \sum_{r = 0}^{\infty} \left(\frac{s - a_1 - \sum_{i \in S} a_i}{s}\right)^{r}\\ &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \frac{a_1}{s} \cdot \frac{1}{1 - \dfrac{s - a_1 - \sum_{i \in S} a_i}{s}}\\ &amp;amp;= \sum_{k = 0}^{n - 1} (-1)^k \sum_{S \subseteq A, |S| = k} \frac{a_1}{a_1 + \sum_{i \in S} a_i}\\ &amp;amp;= \sum_{k = 0}^{s - a_1} \frac{a_1}{a_1 + k} \times \sum_{S \subseteq A, \sum_{i \in S} a_i = k} (-1)^{|S|}\\ &amp;amp;= \sum_{k = 0}^{s - a_1} \frac{a_1}{a_1 + k} \times [x^k] \prod_{i=2}^n(1 - x^{a_i}) \end{aligned} \] 分治求 \(\prod_{i=2}^n(1 - x^{a_i})\) 即可，复杂度 \(O(n \log n \log s)\) 。</description>
    </item>
    
    <item>
      <title>一类DP优化</title>
      <link>https://blog.asukakyle.top/post/%E4%B8%80%E7%B1%BBdp%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 18 Mar 2021 21:30:30 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E4%B8%80%E7%B1%BBdp%E4%BC%98%E5%8C%96/</guid>
      <description>对于一切形如 \(dp[i]=\max\{f_1(j)\times g_1(i)+f_2(j)\}+g_2(i)\) 的状态转移方程，
设 \(L_j(x)=f_1(j)x+f_2(j)\) 那么就有 \(dp[i]=max\{L_j(g_1(i))\}+g_2(i)\)。
从几何角度来看，只需要求出一些直线和 \(x=g_1(i)\) 交点的纵坐标的最大值。
李超线段树 利用李超线段树可以很好地维护上述信息。
李超线段树就是支持 \(O(\log N)\) 插入直线和查询 \(\max{L_i(x)}\) 的数据结构。
线段树的每个节点保存 \(L(mid)\) 最大的那条直线。
插入一条直线时，比较 \(L_{old}(mid)\) 和 \(L_{new}(mid)\)，较大者保留，较小者继续递归。
#define ls o&amp;lt;&amp;lt;1 #define rs o&amp;lt;&amp;lt;1|1 struct Line {  int k, b;  inline int func(int x) {  return k * x + b;  } } t[N &amp;lt;&amp;lt; 2]; void ins(int o, int l, int r, Line x) {  int mid = l + r &amp;gt;&amp;gt; 1;  bool lf = t[o].</description>
    </item>
    
    <item>
      <title>循环卷积优化</title>
      <link>https://blog.asukakyle.top/post/%E5%BE%AA%E7%8E%AF%E5%8D%B7%E7%A7%AF%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 18 Mar 2021 21:11:58 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/%E5%BE%AA%E7%8E%AF%E5%8D%B7%E7%A7%AF%E4%BC%98%E5%8C%96/</guid>
      <description>前置知识  Fast Fourier Transform - HolyK 多项式系列操作  循环卷积优化  简介：目前网上关于多项式操作的文章和模板大多仍然是朴素的实现，常数巨大，这个技巧利用循环卷积优化多项式操作的常数。
（这个trick在N年前就有了，「循环卷积优化」这个名字是我瞎起的，如果有人知道这个trick的名字请联系我。）
 多项式求逆  求 \(B(x)\) 满足 \(A(x)B(x) \equiv 1 \pmod n\)。
 牛顿迭代得 \[ B_{t+1}(x) \equiv B_t(x)\left(2-A(x)B_t(x)\right)\pmod{x^{2^{t+1}}} \] 朴素的实现需要做3次长度为 \(2^{t+2}\) 的FFT，把多余的部分舍去，常数较大。
发现 \(B_{t+1}(x)\) 的前 \(2^t\) 项和 \(B_t(x)\) 一样，所以只需要求后 \(2^t\) 项，即求 \(A(x)B_t^2(x)\) 的 \(x^{2^t}\dots x^{2^{t+1}-1}\) 项系数。
设 \[ A(x)B_t(x) \equiv 1 + b_0x^{2^t}+b_1x^{2^t+1}+\dots+b_{2^t-1}x^{2^{t+1}-1} \pmod{x^{2^{t+1}}} \] 这个结果的前 \(2^t\) 项确定是1了，所以只有后半部分是有用的。
由于 \(\deg B_t = 2^t\)，如果做长度为 \(2^{t+1}\) 的卷积，多余的部分会循环到前半部分，不会影响后半部分的结果。
同样的， \(A(x)B_t^2(x) = A(x)B_t(x) \times B_t(x)\) ，卷积多余的部分会循环到前 \(2^t\) 项，后半部分不会受到影响。</description>
    </item>
    
    <item>
      <title>Fast Fourier Transform</title>
      <link>https://blog.asukakyle.top/post/fft/</link>
      <pubDate>Thu, 18 Mar 2021 15:28:59 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/fft/</guid>
      <description>Introduction  快速傅里叶变换(Fast Fourier Transform，FFT)是一种可在 \(O(n \log n)\) 时间内完成的离散傅里叶变换 (Discrete Fourier Transform，DFT) 的算法，用来实现将信号从原始域（通常是时间或空间）到频域的互相转化。
 FFT 在算法竞赛中主要用来加速多项式乘法（循环卷积）。
多项式 形如 \[ A(x) = a_0 + a_1x + a_2x^2 + \dots + a_{n-1}x^{n - 1} \] 的式子称为 \(x\) 的 \(n - 1\) 次多项式，其中 \(a_0, a_1, \dots, a_{n - 1}\) 称为多项式系数，\(n-1\) 称为多项式的次数，记为 \(\deg A(x)\) 或 \(\deg A\)。
点值 \(n - 1\) 次多项式 \(A(x)\) 在 \(x = m\) 处的点值 \[ A(m) = \sum_{k=0}^{n-1} a_km^k \]</description>
    </item>
    
    <item>
      <title>[Codeforces1148H] Holy Diver</title>
      <link>https://blog.asukakyle.top/post/codeforces1148h-holy-diver/</link>
      <pubDate>Sat, 13 Mar 2021 00:43:08 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces1148h-holy-diver/</guid>
      <description>给定一个最初为空的数组，然后进行 \(n\) 次操作，每次操作给定 \(x,l,r,k\)，在数组末尾插入 \(x\) ，然后查询满足 \(mex(\{a_i, a_{i + 1}, \dots, a_j\}) = k\) 的数对 \((i,j)\) 的个数，强制在线。
\(mex(S)\) 表示集合 \(S\) 中最小的未出现的 自然数。
\(n \leq 2 \times 10^5\)。
 为表示方便，下面记 \(mex(i, j) = mex(\{a_i, a_{i + 1}, \dots, a_j\})\)。
容易发现，如果向集合 \(S\) 中添加数，\(mex(S)\) 不会减小。
所以如果固定右端点 \(j\)，\(mex(i, j)\) 是非严格单调减的；固定左端点 \(i\)，\(mex(i, j)\) 是非严格单调增的。
维护一个 \(n \times n\) 矩阵，\(A[i][j] = mex(j, i)\)，则矩阵 \(A\) 的每一行从左到右都是非严格单调减的，每一列从上到下都是非严格单调增的。
第 \(i\) 次操作增加一个数 \(x\)，考虑从第 \(i - 1\) 行拓展到第 \(i\) 行时矩阵 \(A\) 的变化。</description>
    </item>
    
    <item>
      <title>[Codeforces566C] Logistical Questions</title>
      <link>https://blog.asukakyle.top/post/codeforces566c-logistical-questions/</link>
      <pubDate>Mon, 07 Dec 2020 21:36:10 +0800</pubDate>
      
      <guid>https://blog.asukakyle.top/post/codeforces566c-logistical-questions/</guid>
      <description>一棵 \(n\) 个节点的树，点有点权，边有边权。求这棵树的一个点 \(r\) 使下面的式子最小： \[ \sum_{i \in Tree} val_i \times dist(i, r)^{\frac32} \] \(n \le 2 \times 10^5, val_i, dist(u, v) \ge 0\)。
 带权重心问题，有点妙。
设 \[ f(x) = \sum_{i \in Tree} val_i \times dist(i, x)^{\frac32} \] 这里函数 \(f\) 的定义域是整棵树（不仅包括原来的点，还包括边上的点 ）。
下面研究这个函数的性质。
树上的函数显然不太方便研究，所以考虑换一个 \(\mathbf R\) 上的函数研究。
随便选择一条树上路径 \(u \rightarrow v\) 作为 \(x\) 轴，把 \(u\) 当作原点，这样 \(x\) 就是路径上的点到 \(u\) 的距离。
这里以 \(0 \rightarrow 5\) 为例，节点 \(6 \dots 11\) 分别代表其父亲的一些子树。</description>
    </item>
    
  </channel>
</rss>
